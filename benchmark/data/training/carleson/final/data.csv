repo,file,decl,method,n,metric,model,annotation,syntax_search,mathlib_search,examples,improved_context,og_correct,og_errors,og_score,new_correct,new_errors,new_score,delta,og_raw,new_raw,time
carleson,Carleson/RealInterpolation.lean,"lemma ne_inv_toReal_exponents (hp₀ : p₀ > 0) (hp₁ : p₁ > 0) (hp₀p₁ : p₀ ≠ p₁) :
    (p₀⁻¹.toReal ≠ p₁⁻¹.toReal) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,5,True,,5,0.0,"lemma ne_inv_toReal_exponents (hp₀ : p₀ > 0) (hp₁ : p₁ > 0) (hp₀p₁ : p₀ ≠ p₁) :
    (p₀⁻¹.toReal ≠ p₁⁻¹.toReal) := by
  refine fun h ↦ hp₀p₁ ?_
  rw [← inv_inv p₀, ← inv_inv p₁]
  apply congrArg Inv.inv
  rw [← ofReal_toReal_eq_iff.mpr (inv_ne_top.mpr hp₀.ne'),
    ← ofReal_toReal_eq_iff.mpr (inv_ne_top.mpr hp₁.ne')]
  exact congrArg ENNReal.ofReal h","lemma ne_inv_toReal_exponents (hp₀ : p₀ > 0) (hp₁ : p₁ > 0) (hp₀p₁ : p₀ ≠ p₁) :
    (p₀⁻¹.toReal ≠ p₁⁻¹.toReal) := by
  refine fun h ↦ hp₀p₁ ?_
  rw [← inv_inv p₀, ← inv_inv p₁]
  apply congrArg Inv.inv
  rw [← ofReal_toReal_eq_iff.mpr (inv_ne_top.mpr hp₀.ne'),
    ← ofReal_toReal_eq_iff.mpr (inv_ne_top.mpr hp₁.ne')]
  exact congrArg ENNReal.ofReal h",85.86070513725281
carleson,Carleson/RealInterpolation.lean,"lemma ζ_equality₁ (ht : t ∈ Ioo 0 1) :
    @ζ p₀ q₀ p₁ q₁ t =
    (((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal) *
    ((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal - q₀⁻¹.toReal)) /
    (((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal) *
    ((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal - p₀⁻¹.toReal)) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,5,True,,5,0.0,"lemma ζ_equality₁ (ht : t ∈ Ioo 0 1) :
    @ζ p₀ q₀ p₁ q₁ t =
    (((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal) *
    ((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal - q₀⁻¹.toReal)) /
    (((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal) *
    ((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal - p₀⁻¹.toReal)) := by
  unfold ζ
  rw [← mul_div_mul_right _ _ ht.1.ne', mul_assoc _ _ t, mul_assoc _ _ t]
  congr <;> ring","lemma ζ_equality₁ (ht : t ∈ Ioo 0 1) :
    @ζ p₀ q₀ p₁ q₁ t =
    (((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal) *
    ((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal - q₀⁻¹.toReal)) /
    (((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal) *
    ((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal - p₀⁻¹.toReal)) := by
  unfold ζ
  rw [← mul_div_mul_right _ _ ht.1.ne', mul_assoc _ _ t, mul_assoc _ _ t]
  congr <;> ring",88.79933404922485
carleson,Carleson/RealInterpolation.lean,"lemma lintegral_scale_constant_halfspace (f: ℝ → ENNReal) {a : ℝ} (h : 0 < a) :
    ∫⁻ x : ℝ in Ioi 0, f (a*x) = ENNReal.ofReal |a⁻¹| * ∫⁻ x : ℝ in Ioi 0, f x ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,5,True,,5,0.0,"lemma lintegral_scale_constant_halfspace (f: ℝ → ENNReal) {a : ℝ} (h : 0 < a) :
    ∫⁻ x : ℝ in Ioi 0, f (a*x) = ENNReal.ofReal |a⁻¹| * ∫⁻ x : ℝ in Ioi 0, f x := by
  rw [← lintegral_scale_constant_preimage f h.ne']
  have h₀ : (fun z ↦ a * z) ⁻¹' Ioi 0 = Ioi 0 := by
    ext x
    simp [mul_pos_iff_of_pos_left h]
  rw [h₀]","lemma lintegral_scale_constant_halfspace (f: ℝ → ENNReal) {a : ℝ} (h : 0 < a) :
    ∫⁻ x : ℝ in Ioi 0, f (a*x) = ENNReal.ofReal |a⁻¹| * ∫⁻ x : ℝ in Ioi 0, f x := by
  rw [← lintegral_scale_constant_preimage f h.ne']
  have h₀ : (fun z ↦ a * z) ⁻¹' Ioi 0 = Ioi 0 := by
    ext x
    simp [mul_pos_iff_of_pos_left h]
  rw [h₀]",293.51485800743103
carleson,Carleson/RealInterpolation.lean,"lemma trunc_compl_le_func {f : α → E₁} {a : ℝ} {x : α} [NormedAddCommGroup E₁] :
    ‖(f - trunc f a) x‖ ≤ ‖f x‖ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,5,True,,5,0.0,"lemma trunc_compl_le_func {f : α → E₁} {a : ℝ} {x : α} [NormedAddCommGroup E₁] :
    ‖(f - trunc f a) x‖ ≤ ‖f x‖ := by
  rw [trunc_compl_eq]; dsimp only; split_ifs <;> simp","lemma trunc_compl_le_func {f : α → E₁} {a : ℝ} {x : α} [NormedAddCommGroup E₁] :
    ‖(f - trunc f a) x‖ ≤ ‖f x‖ := by
  rw [trunc_compl_eq]; dsimp only; split_ifs <;> simp",562.9285681247711
carleson,Carleson/RealInterpolation.lean,"lemma lintegral_trunc_mul₁ {g : ℝ → ℝ≥0∞} {j : Bool} {x : α} {p : ℝ} {tc : ToneCouple} :
    ∫⁻ s : ℝ in res' (xor j tc.mon) (tc.inv ‖f x‖), (g s) * ‖trnc j f (tc.ton s) x‖₊ ^ p =
    ∫⁻ s : ℝ in res (xor j tc.mon) (tc.inv ‖f x‖), (g s) * ‖trnc j f (tc.ton s) x‖₊ ^ p ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,5,True,,5,0.0,"lemma lintegral_trunc_mul₁ {g : ℝ → ℝ≥0∞} {j : Bool} {x : α} {p : ℝ} {tc : ToneCouple} :
    ∫⁻ s : ℝ in res' (xor j tc.mon) (tc.inv ‖f x‖), (g s) * ‖trnc j f (tc.ton s) x‖₊ ^ p =
    ∫⁻ s : ℝ in res (xor j tc.mon) (tc.inv ‖f x‖), (g s) * ‖trnc j f (tc.ton s) x‖₊ ^ p := by
  apply setLIntegral_congr
  unfold res res'
  split_ifs
  · exact Ioo_ae_eq_Ioc.symm
  · exact Ioi_ae_eq_Ici.symm","lemma lintegral_trunc_mul₁ {g : ℝ → ℝ≥0∞} {j : Bool} {x : α} {p : ℝ} {tc : ToneCouple} :
    ∫⁻ s : ℝ in res' (xor j tc.mon) (tc.inv ‖f x‖), (g s) * ‖trnc j f (tc.ton s) x‖₊ ^ p =
    ∫⁻ s : ℝ in res (xor j tc.mon) (tc.inv ‖f x‖), (g s) * ‖trnc j f (tc.ton s) x‖₊ ^ p := by
  apply setLIntegral_congr
  unfold res res'
  split_ifs
  · exact Ioo_ae_eq_Ioc.symm
  · exact Ioi_ae_eq_Ici.symm",635.1063039302826
carleson,Carleson/RealInterpolation.lean,"lemma aemeasurability_prod₂ {α : Type u_1} {β : Type u_3}
    [MeasurableSpace α] [MeasurableSpace β]
    {μ : Measure α} {ν : Measure β} [SFinite ν]
    [SFinite μ] ⦃f : α × β → ENNReal⦄
    (hf : AEMeasurable f (μ.prod ν)) :
    ∀ᵐ y : β ∂ν, AEMeasurable (f ∘ (fun x ↦ Prod.mk x y)) μ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,5,True,,2,-0.6,"lemma aemeasurability_prod₂ {α : Type u_1} {β : Type u_3}
    [MeasurableSpace α] [MeasurableSpace β]
    {μ : Measure α} {ν : Measure β} [SFinite ν]
    [SFinite μ] ⦃f : α × β → ENNReal⦄
    (hf : AEMeasurable f (μ.prod ν)) :
    ∀ᵐ y : β ∂ν, AEMeasurable (f ∘ (fun x ↦ Prod.mk x y)) μ := by
  have : AEMeasurable (f ∘ Prod.swap) (ν.prod μ) := by
    refine AEMeasurable.comp_measurable ?_ measurable_swap
    rw [Measure.prod_swap]
    assumption
  exact aemeasurability_prod₁ this","lemma aemeasurability_prod₂ {α : Type u_1} {β : Type u_3}
    [MeasurableSpace α] [MeasurableSpace β]
    {μ : Measure α} {ν : Measure β} [SFinite ν]
    [SFinite μ] ⦃f : α × β → ENNReal⦄
    (hf : AEMeasurable f (μ.prod ν)) :
    ∀ᵐ y : β ∂ν, AEMeasurable (f ∘ (fun x ↦ Prod.mk x y)) μ  := by
  rw [← Measure.prod_swap] at hf
  exact aemeasurability_prod₁ (hf.comp_measurable measurable_swap)",1107.2614850997925
carleson,Carleson/RealInterpolation.lean,"lemma ne_toReal_exp_interp_exp (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0) (hp₁ : p₁ > 0) (hp₀p₁ : p₀ ≠ p₁)
    (hp : p⁻¹ = (1 - ENNReal.ofReal t) * p₀⁻¹ + ENNReal.ofReal t * p₁⁻¹) :
    p₀.toReal ≠ p.toReal ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,4,-0.3333333333333333,"lemma ne_toReal_exp_interp_exp (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0) (hp₁ : p₁ > 0) (hp₀p₁ : p₀ ≠ p₁)
    (hp : p⁻¹ = (1 - ENNReal.ofReal t) * p₀⁻¹ + ENNReal.ofReal t * p₁⁻¹) :
    p₀.toReal ≠ p.toReal := by
  refine fun h ↦ ne_inv_toReal_exp_interp_exp ht hp₀ hp₁ hp₀p₁ hp ?_
  repeat rw [toReal_inv _]
  exact congrArg Inv.inv h","lemma ne_toReal_exp_interp_exp (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0) (hp₁ : p₁ > 0) (hp₀p₁ : p₀ ≠ p₁)
    (hp : p⁻¹ = (1 - ENNReal.ofReal t) * p₀⁻¹ + ENNReal.ofReal t * p₁⁻¹) :
    p₀.toReal ≠ p.toReal  := by
  intro h
  apply ne_inv_toReal_exp_interp_exp ht hp₀ hp₁ hp₀p₁ hp
  rw [toReal_inv _, toReal_inv _]
  exact congrArg Inv.inv h",78.4451310634613
carleson,Carleson/RealInterpolation.lean,"lemma indicator {T : (α → E₁) → α' → E₂} {P : (α → E₁) → Prop} {A : ℝ} (S : Set α')
    (sl : AESublinearOn T P A ν) :
    AESublinearOn (fun u x ↦ (S.indicator (fun y ↦ T u y) x)) P A ν ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,5,True,,1,-0.8,"lemma indicator {T : (α → E₁) → α' → E₂} {P : (α → E₁) → Prop} {A : ℝ} (S : Set α')
    (sl : AESublinearOn T P A ν) :
    AESublinearOn (fun u x ↦ (S.indicator (fun y ↦ T u y) x)) P A ν := by
  refine ⟨AESubAdditiveOn.indicator sl.1 S, fun f c hf hc ↦ ?_⟩
  filter_upwards [sl.2 f c hf hc] with x hx
  by_cases h : x ∈ S <;> simp [h, hx]"," theorem indicator {T : (α → E₁) → α' → E₂} {P : (α → E₁) → Prop} {A : ℝ} (S : Set α')
    (sl : AESublinearOn T P A ν) :
    AESublinearOn (fun u x ↦ (S.indicator (fun y ↦ T u y) x)) P A ν   := by
  ⟨AESubAdditiveOn.indicator sl.1 S, fun f c hf hc ↦ (sl.2 f c hf hc).mono $ λ x ↦ indicator_smul_apply⟩",1307.5424551963806
carleson,Carleson/RealInterpolation.lean,"lemma indicator {T : (α → E₁) → α' → E₂} {P : (α → E₁) → Prop} {A : ℝ}
    (sa : AESubAdditiveOn T P A ν) (S : Set α') :
    AESubAdditiveOn (fun u x ↦ (S.indicator (fun y ↦ T u y) x)) P A ν ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,5,True,,5,0.0,"lemma indicator {T : (α → E₁) → α' → E₂} {P : (α → E₁) → Prop} {A : ℝ}
    (sa : AESubAdditiveOn T P A ν) (S : Set α') :
    AESubAdditiveOn (fun u x ↦ (S.indicator (fun y ↦ T u y) x)) P A ν := by
  intro f g hf hg
  filter_upwards [sa f g hf hg] with x hx
  by_cases h : x ∈ S <;> simp [hx, h]","lemma indicator {T : (α → E₁) → α' → E₂} {P : (α → E₁) → Prop} {A : ℝ}
    (sa : AESubAdditiveOn T P A ν) (S : Set α') :
    AESubAdditiveOn (fun u x ↦ (S.indicator (fun y ↦ T u y) x)) P A ν := by
  intro f g hf hg
  filter_upwards [sa f g hf hg] with x hx
  by_cases h : x ∈ S <;> simp [hx, h]",1310.0105769634247
carleson,Carleson/RealInterpolation.lean,"lemma ζ_equality₂ (ht : t ∈ Ioo 0 1) :
    @ζ p₀ q₀ p₁ q₁ t =
    (((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal) *
    ((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal - q₁⁻¹.toReal)) /
    (((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal) *
    ((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal - p₁⁻¹.toReal)) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"lemma ζ_equality₂ (ht : t ∈ Ioo 0 1) :
    @ζ p₀ q₀ p₁ q₁ t =
    (((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal) *
    ((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal - q₁⁻¹.toReal)) /
    (((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal) *
    ((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal - p₁⁻¹.toReal)) := by
  unfold ζ
  have : - (1 - t) < 0 := neg_neg_iff_pos.mpr (sub_pos.mpr ht.2)
  rw [← mul_div_mul_right _ _ this.ne, mul_assoc _ _ (-(1 - t)), mul_assoc _ _ (-(1 - t))]
  congr <;> ring","lemma ζ_equality₂ (ht : t ∈ Ioo 0 1) :
    @ζ p₀ q₀ p₁ q₁ t =
    (((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal) *
    ((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal - q₁⁻¹.toReal)) /
    (((1 - t) * q₀⁻¹.toReal + t * q₁⁻¹.toReal) *
    ((1 - t) * p₀⁻¹.toReal + t * p₁⁻¹.toReal - p₁⁻¹.toReal)) := by
  unfold ζ
  have : - (1 - t) < 0 := neg_neg_iff_pos.mpr (sub_pos.mpr ht.2)
  rw [← mul_div_mul_right _ _ this.ne, mul_assoc _ _ (-(1 - t)), mul_assoc _ _ (-(1 - t))]
  congr <;> ring",84.41586303710938
carleson,Carleson/RealInterpolation.lean,"lemma one_sub_coe_one_sub (ht : t ∈ Ioo 0 1) :
    (1 - ENNReal.ofReal (1 - t)) = ENNReal.ofReal t ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"lemma one_sub_coe_one_sub (ht : t ∈ Ioo 0 1) :
    (1 - ENNReal.ofReal (1 - t)) = ENNReal.ofReal t := by
  have := ht.2
  rw [← ofReal_one, ← ENNReal.ofReal_sub] <;> congr
  · linarith
  · linarith","lemma one_sub_coe_one_sub (ht : t ∈ Ioo 0 1) :
    (1 - ENNReal.ofReal (1 - t)) = ENNReal.ofReal t := by
  have := ht.2
  rw [← ofReal_one, ← ENNReal.ofReal_sub] <;> congr
  · linarith
  · linarith",235.948486328125
carleson,Carleson/RealInterpolation.lean,"lemma ζ_neg_iff_aux (hp₀ : p₀ > 0) (hq₀ : q₀ > 0) (hp₀' : p₀ ≠ ⊤)
    (hq₀' : q₀ ≠ ⊤) :
    (p₀.toReal * (q₀.toReal - q.toReal) / (q₀.toReal * (p₀.toReal - p.toReal)) < 0) ↔
    ((q.toReal < q₀.toReal) ∧ (p₀.toReal < p.toReal)) ∨
    ((q₀.toReal < q.toReal) ∧ (p.toReal < p₀.toReal)) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,2,-0.6666666666666666,"lemma ζ_neg_iff_aux (hp₀ : p₀ > 0) (hq₀ : q₀ > 0) (hp₀' : p₀ ≠ ⊤)
    (hq₀' : q₀ ≠ ⊤) :
    (p₀.toReal * (q₀.toReal - q.toReal) / (q₀.toReal * (p₀.toReal - p.toReal)) < 0) ↔
    ((q.toReal < q₀.toReal) ∧ (p₀.toReal < p.toReal)) ∨
    ((q₀.toReal < q.toReal) ∧ (p.toReal < p₀.toReal)) := by
  rw [div_neg_iff, ← Left.neg_pos_iff, ← Left.neg_pos_iff, neg_mul_eq_mul_neg, neg_mul_eq_mul_neg,
    mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left,
    mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left, neg_sub, neg_sub]
  · simp only [sub_pos, sub_neg]
  · exact exp_toReal_pos hq₀ hq₀'
  · exact exp_toReal_pos hp₀ hp₀'
  · exact exp_toReal_pos hq₀ hq₀'
  · exact exp_toReal_pos hp₀ hp₀'","lemma ζ_neg_iff_aux (hp₀ : p₀ > 0) (hq₀ : q₀ > 0) (hp₀' : p₀ ≠ ⊤)
    (hq₀' : q₀ ≠ ⊤) :
    (p₀.toReal * (q₀.toReal - q.toReal) / (q₀.toReal * (p₀.toReal - p.toReal)) < 0) ↔
    ((q.toReal < q₀.toReal) ∧ (p₀.toReal < p.toReal)) ∨
    ((q₀.toReal < q.toReal) ∧ (p.toReal < p₀.toReal))  := by
  rw [div_neg_iff, ← Left.neg_pos_iff, ← Left.neg_pos_iff, neg_mul_eq_mul_neg, neg_mul_eq_mul_neg,
    mul_pos_iff_of_pos_left (exp_toReal_pos hq₀ hq₀'),
    mul_pos_iff_of_pos_left (exp_toReal_pos hp₀ hp₀'),
    mul_pos_iff_of_pos_left (exp_toReal_pos hq₀ hq₀'),
    mul_pos_iff_of_pos_left (exp_toReal_pos hp₀ hp₀'), neg_sub, neg_sub]
  simp only [sub_pos, sub_neg]",277.156014919281
carleson,Carleson/RealInterpolation.lean,"lemma d_eq_top_top (hq₀ : q₀ > 0) (hq₀q₁ : q₀ ≠ q₁) (hp₁' : p₁ = ⊤) (hq₁' : q₁ = ⊤) :
    @d α E₁ m p p₀ q₀ p₁ q₁ C₀ C₁ μ _ f = C₁ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"lemma d_eq_top_top (hq₀ : q₀ > 0) (hq₀q₁ : q₀ ≠ q₁) (hp₁' : p₁ = ⊤) (hq₁' : q₁ = ⊤) :
    @d α E₁ m p p₀ q₀ p₁ q₁ C₀ C₁ μ _ f = C₁ := by
  unfold d
  rw [hp₁', hq₁']
  simp only [inv_top, zero_toReal, zero_sub, zero_div, ENNReal.rpow_zero, mul_zero, mul_one,
    zero_mul, one_div]
  rw [div_neg, div_eq_mul_inv, mul_inv_cancel₀]
  · rw [ENNReal.rpow_neg, ENNReal.rpow_one, inv_inv, coe_toReal]
  · exact (toReal_pos (ENNReal.inv_ne_zero.mpr (hq₁' ▸ hq₀q₁)) (ENNReal.inv_ne_top.mpr hq₀.ne')).ne'","lemma d_eq_top_top (hq₀ : q₀ > 0) (hq₀q₁ : q₀ ≠ q₁) (hp₁' : p₁ = ⊤) (hq₁' : q₁ = ⊤) :
    @d α E₁ m p p₀ q₀ p₁ q₁ C₀ C₁ μ _ f = C₁ := by
  unfold d
  rw [hp₁', hq₁']
  simp only [inv_top, zero_toReal, zero_sub, zero_div, ENNReal.rpow_zero, mul_zero, mul_one,
    zero_mul, one_div]
  rw [div_neg, div_eq_mul_inv, mul_inv_cancel₀]
  · rw [ENNReal.rpow_neg, ENNReal.rpow_one, inv_inv, coe_toReal]
  · exact (toReal_pos (ENNReal.inv_ne_zero.mpr (hq₁' ▸ hq₀q₁)) (ENNReal.inv_ne_top.mpr hq₀.ne')).ne'",529.6066629886627
carleson,Carleson/RealInterpolation.lean,"lemma trunc_le {f : α → E₁} {a : ℝ} [NormedAddCommGroup E₁] (x : α) :
    ‖trunc f a x‖ ≤ max 0 a ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,4,-0.3333333333333333,"lemma trunc_le {f : α → E₁} {a : ℝ} [NormedAddCommGroup E₁] (x : α) :
    ‖trunc f a x‖ ≤ max 0 a := by
  unfold trunc
  split_ifs with h
  · rcases (lt_or_le a 0) with a_lt_0 | _
    · exact Trans.trans (Trans.trans h a_lt_0.le) (le_max_left 0 a)
    · exact Trans.trans h (le_max_right 0 a)
  · simp","lemma trunc_le {f : α → E₁} {a : ℝ} [NormedAddCommGroup E₁] (x : α) :
    ‖trunc f a x‖ ≤ max 0 a  := by
  unfold trunc
  split_ifs with h
  exact h.trans (le_max_right _ _)
  simp",558.0441219806671
carleson,Carleson/RealInterpolation.lean,"lemma trunc_preserves_Lp {p : ℝ≥0∞} {a : ℝ} [NormedAddCommGroup E₁]
    (hf : Memℒp f p μ) :
    Memℒp (trunc f a) p μ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,1,-0.8333333333333334,"lemma trunc_preserves_Lp {p : ℝ≥0∞} {a : ℝ} [NormedAddCommGroup E₁]
    (hf : Memℒp f p μ) :
    Memℒp (trunc f a) p μ := by
  refine ⟨aestronglyMeasurable_trunc hf.1, lt_of_le_of_lt (eLpNorm_mono_ae (ae_of_all _ ?_)) hf.2⟩
  intro x
  unfold trunc
  split_ifs with is_fx_le_a <;> simp","lemma trunc_preserves_Lp {p : ℝ≥0∞} {a : ℝ} [NormedAddCommGroup E₁]
    (hf : Memℒp f p μ) :
    Memℒp (trunc f a) p μ  := by
  refine ⟨aestronglyMeasurable_trunc hf.1, lt_of_le_of_lt (eLpNorm_mono_ae (ae_of_all _ (fun x => trunc_le_func))) hf.2⟩",564.8356909751892
carleson,Carleson/RealInterpolation.lean,lemma res_subset_Ioi {j : Bool} {β : ℝ} (hβ : β > 0) : res j β ⊆ Ioi 0 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"lemma res_subset_Ioi {j : Bool} {β : ℝ} (hβ : β > 0) : res j β ⊆ Ioi 0 := by
  unfold res
  split
  · exact Ioo_subset_Ioi_self
  · simp only [Ioi, setOf_subset_setOf]
    intro s hs
    linarith","lemma res_subset_Ioi {j : Bool} {β : ℝ} (hβ : β > 0) : res j β ⊆ Ioi 0 := by
  unfold res
  split
  · exact Ioo_subset_Ioi_self
  · simp only [Ioi, setOf_subset_setOf]
    intro s hs
    linarith",645.8610942363739
carleson,Carleson/RealInterpolation.lean,"@[measurability]
lemma truncation_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ (trunc f (tc.ton a.1)) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,5,-0.2857142857142857,"@[measurability]
lemma truncation_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ (trunc f (tc.ton a.1)) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) := by
  let A := {(s, x) : ℝ × α | ‖f x‖₊ ≤ tc.ton s}
  have : (fun z : ℝ × α ↦ (trunc f (tc.ton z.1)) z.2) =
      Set.indicator A (fun z : ℝ × α ↦ f z.2) := by
    ext z; simp [trunc, indicator, A]
  rw [this]
  exact (aemeasurable_indicator_iff₀ (indicator_ton_measurable hf.restrict _)).mpr
    hf.restrict.snd.restrict","@[measurability]
lemma truncation_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ (trunc f (tc.ton a.1)) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) ))  := by
  have : (fun z : ℝ × α ↦ trunc f (tc.ton z.1) z.2) = Set.indicator { (s, x) | ‖f x‖₊ ≤ tc.ton s } (fun z => f z.2) := by
    funext z
    simp [trunc, indicator]
  rw [this]
  exact (aemeasurable_indicator_iff₀ (indicator_ton_measurable hf.restrict _)).mpr hf.restrict.snd.restrict",13257.707430124283
carleson,Carleson/RealInterpolation.lean,"@[measurability]
 theorem truncation_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ (trunc f (tc.ton a.1)) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"@[measurability]
lemma truncation_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ (trunc f (tc.ton a.1)) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) := by
  let A := {(s, x) : ℝ × α | ‖f x‖₊ ≤ tc.ton s}
  have : (fun z : ℝ × α ↦ (trunc f (tc.ton z.1)) z.2) =
      Set.indicator A (fun z : ℝ × α ↦ f z.2) := by
    ext z; simp [trunc, indicator, A]
  rw [this]
  exact (aemeasurable_indicator_iff₀ (indicator_ton_measurable hf.restrict _)).mpr
    hf.restrict.snd.restrict","@[measurability]
lemma truncation_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ (trunc f (tc.ton a.1)) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) := by
  let A := {(s, x) : ℝ × α | ‖f x‖₊ ≤ tc.ton s}
  have : (fun z : ℝ × α ↦ (trunc f (tc.ton z.1)) z.2) =
      Set.indicator A (fun z : ℝ × α ↦ f z.2) := by
    ext z; simp [trunc, indicator, A]
  rw [this]
  exact (aemeasurable_indicator_iff₀ (indicator_ton_measurable hf.restrict _)).mpr
    hf.restrict.snd.restrict",13258.16963505745
carleson,Carleson/RealInterpolation.lean,"@[measurability]
 theorem truncation_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ (trunc f (tc.ton a.1)) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,4,-0.42857142857142855,"@[measurability]
lemma truncation_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ (trunc f (tc.ton a.1)) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) := by
  let A := {(s, x) : ℝ × α | ‖f x‖₊ ≤ tc.ton s}
  have : (fun z : ℝ × α ↦ (trunc f (tc.ton z.1)) z.2) =
      Set.indicator A (fun z : ℝ × α ↦ f z.2) := by
    ext z; simp [trunc, indicator, A]
  rw [this]
  exact (aemeasurable_indicator_iff₀ (indicator_ton_measurable hf.restrict _)).mpr
    hf.restrict.snd.restrict","@[measurability]
 theorem truncation_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ (trunc f (tc.ton a.1)) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) ))   := by
  have : (fun z : ℝ × α ↦ (trunc f (tc.ton z.1)) z.2) =
  Set.indicator ({(s, x) | ‖f x‖₊ ≤ tc.ton s}) (fun z ↦ f z.2) :=
  funext (λ z => by simp [trunc, indicator])
  rw [this]
  exact (aemeasurable_indicator_iff₀ (indicator_ton_measurable hf.restrict tc)).mpr hf.restrict.snd.restrict",1772.4713661670685
carleson,Carleson/RealInterpolation.lean,"lemma lintegral_lintegral_pow_swap_trunc_compl {q q₀ p₀ : ℝ} [MeasurableSpace E₁]
    [NormedAddCommGroup E₁]
    [BorelSpace E₁] {j : Bool} {hμ : SigmaFinite (μ.restrict (Function.support f))}
    (hp₀ : p₀ > 0) (hp₀q₀ : p₀ ≤ q₀)
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    ∫⁻ (s : ℝ) in Ioi 0,
        (∫⁻ (a : α) in Function.support f, ENNReal.ofReal (s ^ (q - q₀ - 1)) ^ (p₀⁻¹ * q₀)⁻¹ *
        ↑‖trnc j f (tc.ton s) a‖₊ ^ p₀ ∂μ) ^ (p₀⁻¹ * q₀) ≤
    (∫⁻ a : α in Function.support f,
      (∫⁻ (s : ℝ) in Ioi 0,
        (ENNReal.ofReal (s ^ (q - q₀ - 1)) ^ (p₀⁻¹ * q₀)⁻¹ *
        ↑‖trnc j f (tc.ton s) a‖₊  ^ p₀) ^ (p₀⁻¹ * q₀)) ^ (p₀⁻¹ * q₀)⁻¹ ∂μ) ^ (p₀⁻¹ * q₀) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"lemma lintegral_lintegral_pow_swap_trunc_compl {q q₀ p₀ : ℝ} [MeasurableSpace E₁]
    [NormedAddCommGroup E₁]
    [BorelSpace E₁] {j : Bool} {hμ : SigmaFinite (μ.restrict (Function.support f))}
    (hp₀ : p₀ > 0) (hp₀q₀ : p₀ ≤ q₀)
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    ∫⁻ (s : ℝ) in Ioi 0,
        (∫⁻ (a : α) in Function.support f, ENNReal.ofReal (s ^ (q - q₀ - 1)) ^ (p₀⁻¹ * q₀)⁻¹ *
        ↑‖trnc j f (tc.ton s) a‖₊ ^ p₀ ∂μ) ^ (p₀⁻¹ * q₀) ≤
    (∫⁻ a : α in Function.support f,
      (∫⁻ (s : ℝ) in Ioi 0,
        (ENNReal.ofReal (s ^ (q - q₀ - 1)) ^ (p₀⁻¹ * q₀)⁻¹ *
        ↑‖trnc j f (tc.ton s) a‖₊  ^ p₀) ^ (p₀⁻¹ * q₀)) ^ (p₀⁻¹ * q₀)⁻¹ ∂μ) ^ (p₀⁻¹ * q₀) := by
  apply lintegral_lintegral_pow_swap_rpow
  · apply le_of_mul_le_mul_left _ hp₀
    field_simp [hp₀q₀]
  · unfold Function.uncurry
    simp only [Pi.sub_apply]
    fun_prop","lemma lintegral_lintegral_pow_swap_trunc_compl {q q₀ p₀ : ℝ} [MeasurableSpace E₁]
    [NormedAddCommGroup E₁]
    [BorelSpace E₁] {j : Bool} {hμ : SigmaFinite (μ.restrict (Function.support f))}
    (hp₀ : p₀ > 0) (hp₀q₀ : p₀ ≤ q₀)
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    ∫⁻ (s : ℝ) in Ioi 0,
        (∫⁻ (a : α) in Function.support f, ENNReal.ofReal (s ^ (q - q₀ - 1)) ^ (p₀⁻¹ * q₀)⁻¹ *
        ↑‖trnc j f (tc.ton s) a‖₊ ^ p₀ ∂μ) ^ (p₀⁻¹ * q₀) ≤
    (∫⁻ a : α in Function.support f,
      (∫⁻ (s : ℝ) in Ioi 0,
        (ENNReal.ofReal (s ^ (q - q₀ - 1)) ^ (p₀⁻¹ * q₀)⁻¹ *
        ↑‖trnc j f (tc.ton s) a‖₊  ^ p₀) ^ (p₀⁻¹ * q₀)) ^ (p₀⁻¹ * q₀)⁻¹ ∂μ) ^ (p₀⁻¹ * q₀) := by
  apply lintegral_lintegral_pow_swap_rpow
  · apply le_of_mul_le_mul_left _ hp₀
    field_simp [hp₀q₀]
  · unfold Function.uncurry
    simp only [Pi.sub_apply]
    fun_prop",1778.3558449745178
carleson,Carleson/RealInterpolation.lean,"lemma weaktype_estimate_top {C : ℝ≥0} {p : ℝ≥0∞} {q : ℝ≥0∞}
    [NormedAddCommGroup E₁] [NormedAddCommGroup E₂]
    (hq' : q = ⊤) {f : α → E₁} (hf : Memℒp f p μ)
    (hT : HasWeakType T p q μ ν C) {t : ℝ} (ht : C * eLpNorm f p μ ≤ ENNReal.ofReal t) :
    distribution (T f) (ENNReal.ofReal t) ν = 0 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"lemma weaktype_estimate_top {C : ℝ≥0} {p : ℝ≥0∞} {q : ℝ≥0∞}
    [NormedAddCommGroup E₁] [NormedAddCommGroup E₂]
    (hq' : q = ⊤) {f : α → E₁} (hf : Memℒp f p μ)
    (hT : HasWeakType T p q μ ν C) {t : ℝ} (ht : C * eLpNorm f p μ ≤ ENNReal.ofReal t) :
    distribution (T f) (ENNReal.ofReal t) ν = 0 := by
  have wt_est := (hT f hf).2
  unfold wnorm at wt_est
  split_ifs at wt_est
  apply nonpos_iff_eq_zero.mp
  calc
  _ ≤ distribution (T f) (eLpNormEssSup (T f) ν) ν := distribution_mono_right (le_trans wt_est ht)
  _ = _ := meas_eLpNormEssSup_lt","lemma weaktype_estimate_top {C : ℝ≥0} {p : ℝ≥0∞} {q : ℝ≥0∞}
    [NormedAddCommGroup E₁] [NormedAddCommGroup E₂]
    (hq' : q = ⊤) {f : α → E₁} (hf : Memℒp f p μ)
    (hT : HasWeakType T p q μ ν C) {t : ℝ} (ht : C * eLpNorm f p μ ≤ ENNReal.ofReal t) :
    distribution (T f) (ENNReal.ofReal t) ν = 0 := by
  have wt_est := (hT f hf).2
  unfold wnorm at wt_est
  split_ifs at wt_est
  apply nonpos_iff_eq_zero.mp
  calc
  _ ≤ distribution (T f) (eLpNormEssSup (T f) ν) ν := distribution_mono_right (le_trans wt_est ht)
  _ = _ := meas_eLpNormEssSup_lt",1868.8142020702362
carleson,Carleson/DoublingMeasure.lean,"lemma measure_ball_le_pow_two' {x : X} {r : ℝ} {n : ℕ} :
    μ (ball x (2 ^ n * r)) ≤ A ^ n * μ (ball x r) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,3,-0.5,"lemma measure_ball_le_pow_two' {x : X} {r : ℝ} {n : ℕ} :
    μ (ball x (2 ^ n * r)) ≤ A ^ n * μ (ball x r) := by
  have hleft : μ (ball x (2 ^ n * r)) ≠ ⊤ := measure_ball_ne_top x (2 ^ n * r)
  have hright : μ (ball x r) ≠ ⊤ := measure_ball_ne_top x r
  have hfactor : (A ^n : ℝ≥0∞) ≠ ⊤ := Ne.symm (ne_of_beq_false rfl)
  rw [← ENNReal.ofReal_toReal hleft,← ENNReal.ofReal_toReal hright,← ENNReal.ofReal_toReal hfactor,
    ← ENNReal.ofReal_mul]
  · exact ENNReal.ofReal_le_ofReal measure_ball_le_pow_two
  simp only [toReal_pow, coe_toReal, ge_iff_le, zero_le_coe, pow_nonneg]","lemma measure_ball_le_pow_two' {x : X} {r : ℝ} {n : ℕ} :
    μ (ball x (2 ^ n * r)) ≤ A ^ n * μ (ball x r)  := by
  have hleft : μ (ball x (2 ^ n * r)) ≠ ⊤ := measure_ball_ne_top x (2 ^ n * r)
  have hright : μ (ball x r) ≠ ⊤ := measure_ball_ne_top x r
  rw [← ENNReal.ofReal_toReal hleft,← ENNReal.ofReal_toReal hright,← ENNReal.ofReal_toReal (λ h, by simpa using h), ← ENNReal.ofReal_mul]",131.60708594322205
carleson,Carleson/Psi.lean,lemma ψ_formula₂ {x : ℝ} (hx : 1 / (2 * D) ≤ x ∧ x ≤ 1 / 4) : ψ D x = 1 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"lemma ψ_formula₂ {x : ℝ} (hx : 1 / (2 * D) ≤ x ∧ x ≤ 1 / 4) : ψ D x = 1 := by
  unfold ψ
  suffices min 1 (min (4 * D * x - 1) (2 - 4 * x)) = 1 from this.symm ▸ max_eq_right_of_lt one_pos
  have := (div_le_iff₀' (twoD0 hD)).1 hx.1
  exact min_eq_left (le_min (by linarith) (by linarith))","lemma ψ_formula₂ {x : ℝ} (hx : 1 / (2 * D) ≤ x ∧ x ≤ 1 / 4) : ψ D x = 1 := by
  unfold ψ
  suffices min 1 (min (4 * D * x - 1) (2 - 4 * x)) = 1 from this.symm ▸ max_eq_right_of_lt one_pos
  have := (div_le_iff₀' (twoD0 hD)).1 hx.1
  exact min_eq_left (le_min (by linarith) (by linarith))",132.8737452030182
carleson,Carleson/Psi.lean,"include hD in
lemma ψ_formula₂ {x : ℝ} (hx : 1 / (2 * D) ≤ x ∧ x ≤ 1 / 4) : ψ D x = 1 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"include hD in
lemma ψ_formula₂ {x : ℝ} (hx : 1 / (2 * D) ≤ x ∧ x ≤ 1 / 4) : ψ D x = 1 := by
  unfold ψ
  suffices min 1 (min (4 * D * x - 1) (2 - 4 * x)) = 1 from this.symm ▸ max_eq_right_of_lt one_pos
  have := (div_le_iff₀' (twoD0 hD)).1 hx.1
  exact min_eq_left (le_min (by linarith) (by linarith))","include hD in
lemma ψ_formula₂ {x : ℝ} (hx : 1 / (2 * D) ≤ x ∧ x ≤ 1 / 4) : ψ D x = 1 := by
  unfold ψ
  suffices min 1 (min (4 * D * x - 1) (2 - 4 * x)) = 1 from this.symm ▸ max_eq_right_of_lt one_pos
  have := (div_le_iff₀' (twoD0 hD)).1 hx.1
  exact min_eq_left (le_min (by linarith) (by linarith))",132.96220898628235
carleson,Carleson/RealInterpolation.lean,"lemma preservation_interpolation (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0)
    (hp₁ : p₁ > 0) (hp : p⁻¹ = (1 - ENNReal.ofReal t) * p₀⁻¹ + ENNReal.ofReal t * p₁⁻¹) :
    p⁻¹.toReal = (1 - t) * (p₀⁻¹).toReal + t * (p₁⁻¹).toReal ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"lemma preservation_interpolation (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0)
    (hp₁ : p₁ > 0) (hp : p⁻¹ = (1 - ENNReal.ofReal t) * p₀⁻¹ + ENNReal.ofReal t * p₁⁻¹) :
    p⁻¹.toReal = (1 - t) * (p₀⁻¹).toReal + t * (p₁⁻¹).toReal := by
  rw [← one_toReal, ← toReal_ofReal ht.1.le, ← ENNReal.toReal_sub_of_le]
  · rw [← toReal_mul, ← toReal_mul, ← toReal_add]
    · exact congrArg ENNReal.toReal hp
    · exact mul_ne_top (sub_ne_top (top_ne_one.symm)) (inv_ne_top.mpr hp₀.ne')
    · exact mul_ne_top coe_ne_top (inv_ne_top.mpr hp₁.ne')
  · exact ofReal_le_one.mpr ht.2.le
  · exact top_ne_one.symm","lemma preservation_interpolation (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0)
    (hp₁ : p₁ > 0) (hp : p⁻¹ = (1 - ENNReal.ofReal t) * p₀⁻¹ + ENNReal.ofReal t * p₁⁻¹) :
    p⁻¹.toReal = (1 - t) * (p₀⁻¹).toReal + t * (p₁⁻¹).toReal := by
  rw [← one_toReal, ← toReal_ofReal ht.1.le, ← ENNReal.toReal_sub_of_le]
  · rw [← toReal_mul, ← toReal_mul, ← toReal_add]
    · exact congrArg ENNReal.toReal hp
    · exact mul_ne_top (sub_ne_top (top_ne_one.symm)) (inv_ne_top.mpr hp₀.ne')
    · exact mul_ne_top coe_ne_top (inv_ne_top.mpr hp₁.ne')
  · exact ofReal_le_one.mpr ht.2.le
  · exact top_ne_one.symm",79.09630107879639
carleson,Carleson/RealInterpolation.lean,"lemma ζ_symm :
    @ζ p₀ q₀ p₁ q₁ t = @ζ p₁ q₁ p₀ q₀ (1 - t) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"lemma ζ_symm :
    @ζ p₀ q₀ p₁ q₁ t = @ζ p₁ q₁ p₀ q₀ (1 - t) := by
  unfold ζ
  rw [← mul_div_mul_right (c := - 1), mul_assoc _ _ (-1), mul_assoc _ _ (-1)]; on_goal 2 => positivity
  simp only [mul_neg, mul_one, neg_sub, _root_.sub_sub_cancel]
  nth_rewrite 1 [add_comm]; nth_rw 2 [add_comm]","lemma ζ_symm :
    @ζ p₀ q₀ p₁ q₁ t = @ζ p₁ q₁ p₀ q₀ (1 - t) := by
  unfold ζ
  rw [← mul_div_mul_right (c := - 1), mul_assoc _ _ (-1), mul_assoc _ _ (-1)]; on_goal 2 => positivity
  simp only [mul_neg, mul_one, neg_sub, _root_.sub_sub_cancel]
  nth_rewrite 1 [add_comm]; nth_rw 2 [add_comm]",85.93210887908936
carleson,Carleson/RealInterpolation.lean,"lemma ζ_pos_iff_aux (hp₀ : p₀ > 0) (hq₀ : q₀ > 0) (hp₀' : p₀ ≠ ⊤) (hq₀' : q₀ ≠ ⊤) :
    ( 0 < p₀.toReal * (q₀.toReal - q.toReal) / (q₀.toReal * (p₀.toReal - p.toReal))) ↔
    ((q.toReal < q₀.toReal) ∧ (p.toReal < p₀.toReal)) ∨
    ((q₀.toReal < q.toReal) ∧ (p₀.toReal < p.toReal)) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"lemma ζ_pos_iff_aux (hp₀ : p₀ > 0) (hq₀ : q₀ > 0) (hp₀' : p₀ ≠ ⊤) (hq₀' : q₀ ≠ ⊤) :
    ( 0 < p₀.toReal * (q₀.toReal - q.toReal) / (q₀.toReal * (p₀.toReal - p.toReal))) ↔
    ((q.toReal < q₀.toReal) ∧ (p.toReal < p₀.toReal)) ∨
    ((q₀.toReal < q.toReal) ∧ (p₀.toReal < p.toReal)) := by
  rw [_root_.div_pos_iff, ← Left.neg_pos_iff, ← Left.neg_pos_iff, neg_mul_eq_mul_neg,
      neg_mul_eq_mul_neg]
  rw [mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left,
      mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left, neg_sub, neg_sub]
  · simp only [sub_pos, sub_neg]
  · exact exp_toReal_pos hq₀ hq₀'
  · exact exp_toReal_pos hp₀ hp₀'
  · exact exp_toReal_pos hq₀ hq₀'
  · exact exp_toReal_pos hp₀ hp₀'","lemma ζ_pos_iff_aux (hp₀ : p₀ > 0) (hq₀ : q₀ > 0) (hp₀' : p₀ ≠ ⊤) (hq₀' : q₀ ≠ ⊤) :
    ( 0 < p₀.toReal * (q₀.toReal - q.toReal) / (q₀.toReal * (p₀.toReal - p.toReal))) ↔
    ((q.toReal < q₀.toReal) ∧ (p.toReal < p₀.toReal)) ∨
    ((q₀.toReal < q.toReal) ∧ (p₀.toReal < p.toReal)) := by
  rw [_root_.div_pos_iff, ← Left.neg_pos_iff, ← Left.neg_pos_iff, neg_mul_eq_mul_neg,
      neg_mul_eq_mul_neg]
  rw [mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left,
      mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left, neg_sub, neg_sub]
  · simp only [sub_pos, sub_neg]
  · exact exp_toReal_pos hq₀ hq₀'
  · exact exp_toReal_pos hp₀ hp₀'
  · exact exp_toReal_pos hq₀ hq₀'
  · exact exp_toReal_pos hp₀ hp₀'",232.39272689819336
carleson,Carleson/RealInterpolation.lean,"lemma ζ_pos_iff_aux₀ (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0) (hq₀ : q₀ > 0)
    (hp₁ : p₁ > 0) (hq₁ : q₁ > 0) (hp₀p₁ : p₀ ≠ p₁) (hq₀q₁ : q₀ ≠ q₁) :
    (0 < @ζ p₀ q₀ p₁ q₁ t) ↔
    q₀⁻¹.toReal < q₁⁻¹.toReal ∧ p₀⁻¹.toReal < p₁⁻¹.toReal ∨
    q₁⁻¹.toReal < q₀⁻¹.toReal ∧ p₁⁻¹.toReal < p₀⁻¹.toReal ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"lemma ζ_pos_iff_aux₀ (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0) (hq₀ : q₀ > 0)
    (hp₁ : p₁ > 0) (hq₁ : q₁ > 0) (hp₀p₁ : p₀ ≠ p₁) (hq₀q₁ : q₀ ≠ q₁) :
    (0 < @ζ p₀ q₀ p₁ q₁ t) ↔
    q₀⁻¹.toReal < q₁⁻¹.toReal ∧ p₀⁻¹.toReal < p₁⁻¹.toReal ∨
    q₁⁻¹.toReal < q₀⁻¹.toReal ∧ p₁⁻¹.toReal < p₀⁻¹.toReal := by
  unfold ζ
  rw [_root_.div_pos_iff, ← Left.neg_pos_iff, ← Left.neg_pos_iff, neg_mul_eq_mul_neg,
      neg_mul_eq_mul_neg, mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left,
      mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left, neg_sub, neg_sub]
  · simp only [sub_pos, sub_neg]
  · exact preservation_positivity_inv_toReal ht hq₀ hq₁ hq₀q₁
  · exact preservation_positivity_inv_toReal ht hp₀ hp₁ hp₀p₁
  · exact preservation_positivity_inv_toReal ht hq₀ hq₁ hq₀q₁
  · exact preservation_positivity_inv_toReal ht hp₀ hp₁ hp₀p₁","lemma ζ_pos_iff_aux₀ (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0) (hq₀ : q₀ > 0)
    (hp₁ : p₁ > 0) (hq₁ : q₁ > 0) (hp₀p₁ : p₀ ≠ p₁) (hq₀q₁ : q₀ ≠ q₁) :
    (0 < @ζ p₀ q₀ p₁ q₁ t) ↔
    q₀⁻¹.toReal < q₁⁻¹.toReal ∧ p₀⁻¹.toReal < p₁⁻¹.toReal ∨
    q₁⁻¹.toReal < q₀⁻¹.toReal ∧ p₁⁻¹.toReal < p₀⁻¹.toReal := by
  unfold ζ
  rw [_root_.div_pos_iff, ← Left.neg_pos_iff, ← Left.neg_pos_iff, neg_mul_eq_mul_neg,
      neg_mul_eq_mul_neg, mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left,
      mul_pos_iff_of_pos_left, mul_pos_iff_of_pos_left, neg_sub, neg_sub]
  · simp only [sub_pos, sub_neg]
  · exact preservation_positivity_inv_toReal ht hq₀ hq₁ hq₀q₁
  · exact preservation_positivity_inv_toReal ht hp₀ hp₁ hp₀p₁
  · exact preservation_positivity_inv_toReal ht hq₀ hq₁ hq₀q₁
  · exact preservation_positivity_inv_toReal ht hp₀ hp₁ hp₀p₁",445.5305440425873
carleson,Carleson/RealInterpolation.lean,"lemma ζ_le_zero_iff_of_lt₀ (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0) (hq₀ : q₀ > 0) (hp₁ : p₁ > 0)
    (hq₁ : q₁ > 0) (hq₀q₁ : q₀ ≠ q₁)
    (hp : p⁻¹ = (1 - ENNReal.ofReal t) * p₀⁻¹ + ENNReal.ofReal t * p₁⁻¹)
    (hq : q⁻¹ = (1 - ENNReal.ofReal t) * q₀⁻¹ + ENNReal.ofReal t * q₁⁻¹) (hp₀p₁' : p₀ < p₁) :
    (@ζ p₀ q₀ p₁ q₁ t ≤ 0) ↔ q < q₀ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"lemma ζ_le_zero_iff_of_lt₀ (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0) (hq₀ : q₀ > 0) (hp₁ : p₁ > 0)
    (hq₁ : q₁ > 0) (hq₀q₁ : q₀ ≠ q₁)
    (hp : p⁻¹ = (1 - ENNReal.ofReal t) * p₀⁻¹ + ENNReal.ofReal t * p₁⁻¹)
    (hq : q⁻¹ = (1 - ENNReal.ofReal t) * q₀⁻¹ + ENNReal.ofReal t * q₁⁻¹) (hp₀p₁' : p₀ < p₁) :
    (@ζ p₀ q₀ p₁ q₁ t ≤ 0) ↔ q < q₀ := by
  constructor <;> intro h
  · rcases (Decidable.lt_or_eq_of_le h) with ζ_lt_0 | ζ_eq_0
    · exact (ζ_neg_iff_of_lt₀ ht hp₀ hq₀ hp₁ hq₁ hq₀q₁ hp hq hp₀p₁').mp ζ_lt_0
    · exact False.elim <| (ζ_ne_zero ht hp₀ hq₀ hp₁ hq₁ hp₀p₁'.ne hq₀q₁) ζ_eq_0
  · exact ((ζ_neg_iff_of_lt₀ ht hp₀ hq₀ hp₁ hq₁ hq₀q₁ hp hq hp₀p₁').mpr h).le","lemma ζ_le_zero_iff_of_lt₀ (ht : t ∈ Ioo 0 1) (hp₀ : p₀ > 0) (hq₀ : q₀ > 0) (hp₁ : p₁ > 0)
    (hq₁ : q₁ > 0) (hq₀q₁ : q₀ ≠ q₁)
    (hp : p⁻¹ = (1 - ENNReal.ofReal t) * p₀⁻¹ + ENNReal.ofReal t * p₁⁻¹)
    (hq : q⁻¹ = (1 - ENNReal.ofReal t) * q₀⁻¹ + ENNReal.ofReal t * q₁⁻¹) (hp₀p₁' : p₀ < p₁) :
    (@ζ p₀ q₀ p₁ q₁ t ≤ 0) ↔ q < q₀ := by
  constructor <;> intro h
  · rcases (Decidable.lt_or_eq_of_le h) with ζ_lt_0 | ζ_eq_0
    · exact (ζ_neg_iff_of_lt₀ ht hp₀ hq₀ hp₁ hq₁ hq₀q₁ hp hq hp₀p₁').mp ζ_lt_0
    · exact False.elim <| (ζ_ne_zero ht hp₀ hq₀ hp₁ hq₁ hp₀p₁'.ne hq₀q₁) ζ_eq_0
  · exact ((ζ_neg_iff_of_lt₀ ht hp₀ hq₀ hp₁ hq₁ hq₀q₁ hp hq hp₀p₁').mpr h).le",469.14050912857056
carleson,Carleson/RealInterpolation.lean,"lemma d_ne_top_aux₄ {b₀ c₀ b₁ c₁ : ℝ} (hC₀ : C₀ > 0) (hC₁ : C₁ > 0) (hF : eLpNorm f p μ ∈ Ioo 0 ⊤) :
    (C₀ ^ c₀ * (eLpNorm f p μ ^ p.toReal) ^ b₀) /
    (C₁ ^ c₁ * (eLpNorm f p μ ^ p.toReal) ^ b₁) ≠ ⊤ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,1,-0.8571428571428571,"lemma d_ne_top_aux₄ {b₀ c₀ b₁ c₁ : ℝ} (hC₀ : C₀ > 0) (hC₁ : C₁ > 0) (hF : eLpNorm f p μ ∈ Ioo 0 ⊤) :
    (C₀ ^ c₀ * (eLpNorm f p μ ^ p.toReal) ^ b₀) /
    (C₁ ^ c₁ * (eLpNorm f p μ ^ p.toReal) ^ b₁) ≠ ⊤ := by
  refine (div_lt_top ?_ ?_).ne
  · apply d_ne_top_aux₃ <;> assumption
  · apply d_ne_zero_aux₂ <;> assumption","lemma d_ne_top_aux₄ {b₀ c₀ b₁ c₁ : ℝ} (hC₀ : C₀ > 0) (hC₁ : C₁ > 0) (hF : eLpNorm f p μ ∈ Ioo 0 ⊤) :
    (C₀ ^ c₀ * (eLpNorm f p μ ^ p.toReal) ^ b₀) /
    (C₁ ^ c₁ * (eLpNorm f p μ ^ p.toReal) ^ b₁) ≠ ⊤  := by
  refine (div_lt_top (d_ne_top_aux₃ hC₀ hF) (d_ne_zero_aux₂ hC₁ hF)).ne",502.82043409347534
carleson,Carleson/RealInterpolation.lean,"lemma trunc_mono {f : α → E₁} {a b : ℝ} [NormedAddCommGroup E₁]
    (hab : a ≤ b) {x : α} : ‖trunc f a x‖ ≤ ‖trunc f b x‖ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"lemma trunc_mono {f : α → E₁} {a b : ℝ} [NormedAddCommGroup E₁]
    (hab : a ≤ b) {x : α} : ‖trunc f a x‖ ≤ ‖trunc f b x‖ := by
  unfold trunc
  split_ifs
  · rfl
  · linarith
  · rw [norm_zero]; exact norm_nonneg _
  · exact le_refl _","lemma trunc_mono {f : α → E₁} {a b : ℝ} [NormedAddCommGroup E₁]
    (hab : a ≤ b) {x : α} : ‖trunc f a x‖ ≤ ‖trunc f b x‖ := by
  unfold trunc
  split_ifs
  · rfl
  · linarith
  · rw [norm_zero]; exact norm_nonneg _
  · exact le_refl _",639.4455497264862
carleson,Carleson/RealInterpolation.lean,"/-- If `f` is in `Lp`, the complement of the truncation is in `Lq` for `q < p`. -/
 theorem trunc_compl_Lp_Lq_lower [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    (hp : p ≠ ⊤)
    (hpq : q ∈ Ioo 0 p) (ha : a > 0) (hf : Memℒp f p μ) :
    Memℒp (trnc ⊥ f a) q μ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,1,-0.8571428571428571,"/-- If `f` is in `Lp`, the complement of the truncation is in `Lq` for `q < p`. -/
lemma trunc_compl_Lp_Lq_lower [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    (hp : p ≠ ⊤)
    (hpq : q ∈ Ioo 0 p) (ha : a > 0) (hf : Memℒp f p μ) :
    Memℒp (trnc ⊥ f a) q μ := by
  refine ⟨aestronglyMeasurable_trnc hf.1, ?_⟩
  have : q.toReal > 0 := toReal_pos hpq.left.ne' hpq.right.ne_top
  refine (rpow_lt_top_iff_of_pos this).mp ?_
  refine lt_of_le_of_lt
    (estimate_eLpNorm_trunc_compl hp hpq hf.1.aemeasurable ha) ?_
  apply mul_lt_top coe_lt_top
  refine (rpow_lt_top_iff_of_pos ?_).mpr hf.2
  exact toReal_pos (lt_trans hpq.left hpq.right).ne' hp","/-- If `f` is in `Lp`, the complement of the truncation is in `Lq` for `q < p`. -/
 theorem trunc_compl_Lp_Lq_lower [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    (hp : p ≠ ⊤)
    (hpq : q ∈ Ioo 0 p) (ha : a > 0) (hf : Memℒp f p μ) :
    Memℒp (trnc ⊥ f a) q μ   := by
  refine ⟨aestronglyMeasurable_trnc hf.1, (rpow_lt_top_iff_of_pos (toReal_pos hpq.1.ne' hpq.2.ne_top)).mp $ lt_of_le_of_lt (estimate_eLpNorm_trunc_compl hp hpq hf.1.aemeasurable ha) (mul_lt_top coe_lt_top $ (rpow_lt_top_iff_of_pos (toReal_pos (lt_trans hpq.1 hpq.2).ne' hp)).mpr hf.2)⟩",703.6920800209045
carleson,Carleson/RealInterpolation.lean,"/-- If `f` is in `Lp`, the complement of the truncation is in `Lq` for `q < p`. -/
lemma trunc_compl_Lp_Lq_lower [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    (hp : p ≠ ⊤)
    (hpq : q ∈ Ioo 0 p) (ha : a > 0) (hf : Memℒp f p μ) :
    Memℒp (trnc ⊥ f a) q μ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,1,-0.8571428571428571,"/-- If `f` is in `Lp`, the complement of the truncation is in `Lq` for `q < p`. -/
lemma trunc_compl_Lp_Lq_lower [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    (hp : p ≠ ⊤)
    (hpq : q ∈ Ioo 0 p) (ha : a > 0) (hf : Memℒp f p μ) :
    Memℒp (trnc ⊥ f a) q μ := by
  refine ⟨aestronglyMeasurable_trnc hf.1, ?_⟩
  have : q.toReal > 0 := toReal_pos hpq.left.ne' hpq.right.ne_top
  refine (rpow_lt_top_iff_of_pos this).mp ?_
  refine lt_of_le_of_lt
    (estimate_eLpNorm_trunc_compl hp hpq hf.1.aemeasurable ha) ?_
  apply mul_lt_top coe_lt_top
  refine (rpow_lt_top_iff_of_pos ?_).mpr hf.2
  exact toReal_pos (lt_trans hpq.left hpq.right).ne' hp","/-- If `f` is in `Lp`, the complement of the truncation is in `Lq` for `q < p`. -/
lemma trunc_compl_Lp_Lq_lower [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    (hp : p ≠ ⊤)
    (hpq : q ∈ Ioo 0 p) (ha : a > 0) (hf : Memℒp f p μ) :
    Memℒp (trnc ⊥ f a) q μ  := by
  exact ⟨aestronglyMeasurable_trnc hf.1, (rpow_lt_top_iff_of_pos (toReal_pos hpq.1.ne' hpq.2.ne_top)).mp
      (lt_of_le_of_lt (estimate_eLpNorm_trunc_compl hp hpq hf.1.aemeasurable ha) 
      (mul_lt_top coe_lt_top ((rpow_lt_top_iff_of_pos (toReal_pos (lt_trans hpq.1 hpq.2).ne' hp)).mpr hf.2)))⟩",705.5220277309418
carleson,Carleson/RealInterpolation.lean,"lemma lintegral_Ioi_rpow_of_lt_abs {β σ : ℝ} (hβ : β > 0) (hσ : σ < -1):
    ∫⁻ s : ℝ in Ioi β, ENNReal.ofReal (s ^ σ) =
    ENNReal.ofReal (β ^ (σ + 1) / |σ + 1|) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,4,-0.42857142857142855,"lemma lintegral_Ioi_rpow_of_lt_abs {β σ : ℝ} (hβ : β > 0) (hσ : σ < -1):
    ∫⁻ s : ℝ in Ioi β, ENNReal.ofReal (s ^ σ) =
    ENNReal.ofReal (β ^ (σ + 1) / |σ + 1|) := by
  have hσ2 : σ + 1 < 0 := by linarith
  rw [abs_of_neg hσ2, ← ofReal_integral_eq_lintegral_ofReal]
  · rw [integral_Ioi_rpow_of_lt hσ hβ, div_neg, neg_div]
  · apply integrableOn_Ioi_rpow_of_lt hσ hβ
  · filter_upwards [self_mem_ae_restrict measurableSet_Ioi]
    exact fun s hs ↦ Real.rpow_nonneg (lt_trans hβ hs).le σ","    ∫⁻ s : ℝ in Ioi β, ENNReal.ofReal (s ^ σ) =
    ENNReal.ofReal (β ^ (σ + 1) / |σ + 1|)  := by
  rw [abs_of_neg (by linarith : σ + 1 < 0), ← ofReal_integral_eq_lintegral_ofReal, integral_Ioi_rpow_of_lt hσ hβ, div_neg, neg_div]
  apply integrableOn_Ioi_rpow_of_lt hσ hβ
  filter_upwards [self_mem_ae_restrict measurableSet_Ioi] with s hs using Real.rpow_nonneg (lt_trans hβ hs).le σ
",771.5721349716187
carleson,Carleson/RealInterpolation.lean,lemma eq_of_le_of_le (a b : ℝ≥0∞) (hab : a ≤ b) (hab': b ≤ a) : a = b ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,1,-0.8571428571428571,"lemma eq_of_le_of_le (a b : ℝ≥0∞) (hab : a ≤ b) (hab': b ≤ a) : a = b := by
  rcases (eq_or_ne a b) with a_eq_b | a_ne_b
  · exact a_eq_b
  · rcases lt_or_gt_of_ne a_ne_b with a_lt_b | b_lt_a
    · contrapose! a_lt_b; exact hab'
    · contrapose! b_lt_a; exact hab","lemma eq_of_le_of_le (a b : ℝ≥0∞) (hab : a ≤ b) (hab': b ≤ a) : a = b  := by
  apply le_antisymm hab hab'",774.6829431056976
carleson,Carleson/RealInterpolation.lean,"lemma rpow_add_of_pos (a : ℝ≥0∞) (c d : ℝ) (hc : c > 0) (hd : d > 0):
    a ^ (c + d) = a ^ c * a ^ d ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,2,-0.7142857142857143,"lemma rpow_add_of_pos (a : ℝ≥0∞) (c d : ℝ) (hc : c > 0) (hd : d > 0):
    a ^ (c + d) = a ^ c * a ^ d := by
  have hcd : c + d  > 0 := by linarith
  rcases (eq_or_ne a 0) with a_eq_zero | a_ne_zero
  · rw [a_eq_zero, zero_rpow_of_pos hcd, zero_rpow_of_pos hc, zero_rpow_of_pos hd, mul_zero]
  · rcases (eq_or_ne a ⊤) with a_eq_top | a_ne_top
    · rw [a_eq_top, top_rpow_of_pos hcd, top_rpow_of_pos hc, top_rpow_of_pos hd, top_mul_top]
    · rw [ENNReal.rpow_add c d a_ne_zero a_ne_top]"," theorem rpow_add_of_pos (a : ℝ≥0∞) (c d : ℝ) (hc : c > 0) (hd : d > 0):
    a ^ (c + d) = a ^ c * a ^ d   := by
  cases eq_or_ne a 0 with rfl ha",777.5386128425598
carleson,Carleson/RealInterpolation.lean,"@[measurability]
 theorem truncation_compl_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ ((f - trunc f (tc.ton a.1))) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,9,True,,6,-0.3333333333333333,"@[measurability]
lemma truncation_compl_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ ((f - trunc f (tc.ton a.1))) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) := by
  let A := {(s, x) : ℝ × α | tc.ton s < ‖f x‖₊}
  have : (fun z : ℝ × α ↦ (f - trunc f (tc.ton z.1)) z.2) = Set.indicator A (fun z : ℝ × α ↦ f z.2) := by
    ext z; rw [trunc_compl_eq]; simp [A, indicator]
  rw [this]
  refine (aemeasurable_indicator_iff₀ (indicator_ton_measurable_lt hf.restrict _)).mpr
    hf.restrict.snd.restrict","@[measurability]
 theorem truncation_compl_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ ((f - trunc f (tc.ton a.1))) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) ))  := by
  have : (fun z : ℝ × α ↦ (f - trunc f (tc.ton z.1)) z.2) = Set.indicator {(s, x) : ℝ × α | tc.ton s < ‖f x‖₊} (fun z : ℝ × α ↦ f z.2) :=
    funext (fun z => by rw [trunc_compl_eq]; simp [indicator])
  rw [this]
  exact (aemeasurable_indicator_iff₀ (indicator_ton_measurable_lt hf.restrict _)).mpr hf.restrict.snd.restrict",1892.5022549629211
carleson,Carleson/RealInterpolation.lean,"@[measurability]
lemma truncation_compl_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ ((f - trunc f (tc.ton a.1))) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,9,True,,9,0.0,"@[measurability]
lemma truncation_compl_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ ((f - trunc f (tc.ton a.1))) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) := by
  let A := {(s, x) : ℝ × α | tc.ton s < ‖f x‖₊}
  have : (fun z : ℝ × α ↦ (f - trunc f (tc.ton z.1)) z.2) = Set.indicator A (fun z : ℝ × α ↦ f z.2) := by
    ext z; rw [trunc_compl_eq]; simp [A, indicator]
  rw [this]
  refine (aemeasurable_indicator_iff₀ (indicator_ton_measurable_lt hf.restrict _)).mpr
    hf.restrict.snd.restrict","@[measurability]
lemma truncation_compl_ton_measurable {f : α → E₁}
    [MeasurableSpace E₁] [NormedAddCommGroup E₁] [BorelSpace E₁]
    [SigmaFinite (μ.restrict (Function.support f))] -- TODO: TypeClass or implicit variable?
    (hf : AEMeasurable f μ) (tc : ToneCouple) :
    AEMeasurable (fun a : ℝ × α ↦ ((f - trunc f (tc.ton a.1))) a.2)
    ((volume.restrict (Ioi 0)).prod (μ.restrict (Function.support f) )) := by
  let A := {(s, x) : ℝ × α | tc.ton s < ‖f x‖₊}
  have : (fun z : ℝ × α ↦ (f - trunc f (tc.ton z.1)) z.2) = Set.indicator A (fun z : ℝ × α ↦ f z.2) := by
    ext z; rw [trunc_compl_eq]; simp [A, indicator]
  rw [this]
  refine (aemeasurable_indicator_iff₀ (indicator_ton_measurable_lt hf.restrict _)).mpr
    hf.restrict.snd.restrict",1893.7099089622498
carleson,Carleson/RealInterpolation.lean,"lemma estimate_norm_rpow_range_operator {q : ℝ} {f : α → E₁}
    [NormedAddCommGroup E₁]
    [MeasurableSpace E₂] [NormedAddCommGroup E₂] [BorelSpace E₂]
    (hq : 0 < q) (tc : ToneCouple) {A : ℝ} (hA : A > 0)
    (ht : Subadditive_trunc T A f ν) (hTf : AEMeasurable (T f) ν) :
  ∫⁻ x : α', ‖T f x‖₊ ^ q ∂ν ≤
  ENNReal.ofReal ((2 * A)^q * q) * ∫⁻ s in Ioi (0 : ℝ), distribution (T (trunc f (tc.ton s)))
      (ENNReal.ofReal s) ν * ENNReal.ofReal (s^(q - 1)) +
  distribution (T (f - trunc f (tc.ton s))) (ENNReal.ofReal s) ν * ENNReal.ofReal (s^(q - 1)) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",3,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"lemma estimate_norm_rpow_range_operator {q : ℝ} {f : α → E₁}
    [NormedAddCommGroup E₁]
    [MeasurableSpace E₂] [NormedAddCommGroup E₂] [BorelSpace E₂]
    (hq : 0 < q) (tc : ToneCouple) {A : ℝ} (hA : A > 0)
    (ht : Subadditive_trunc T A f ν) (hTf : AEMeasurable (T f) ν) :
  ∫⁻ x : α', ‖T f x‖₊ ^ q ∂ν ≤
  ENNReal.ofReal ((2 * A)^q * q) * ∫⁻ s in Ioi (0 : ℝ), distribution (T (trunc f (tc.ton s)))
      (ENNReal.ofReal s) ν * ENNReal.ofReal (s^(q - 1)) +
  distribution (T (f - trunc f (tc.ton s))) (ENNReal.ofReal s) ν * ENNReal.ofReal (s^(q - 1)) := by
  rw [rewrite_norm_func hq hA hTf]
  apply mul_le_mul' (le_refl _)
  apply setLIntegral_mono' measurableSet_Ioi
  intro s s_pos
  rw [← add_mul]
  apply mul_le_mul' ?_ (le_refl _)
  exact estimate_distribution_Subadditive_trunc s_pos (tc.ran_ton s s_pos) hA.le ht","lemma estimate_norm_rpow_range_operator {q : ℝ} {f : α → E₁}
    [NormedAddCommGroup E₁]
    [MeasurableSpace E₂] [NormedAddCommGroup E₂] [BorelSpace E₂]
    (hq : 0 < q) (tc : ToneCouple) {A : ℝ} (hA : A > 0)
    (ht : Subadditive_trunc T A f ν) (hTf : AEMeasurable (T f) ν) :
  ∫⁻ x : α', ‖T f x‖₊ ^ q ∂ν ≤
  ENNReal.ofReal ((2 * A)^q * q) * ∫⁻ s in Ioi (0 : ℝ), distribution (T (trunc f (tc.ton s)))
      (ENNReal.ofReal s) ν * ENNReal.ofReal (s^(q - 1)) +
  distribution (T (f - trunc f (tc.ton s))) (ENNReal.ofReal s) ν * ENNReal.ofReal (s^(q - 1)) := by
  rw [rewrite_norm_func hq hA hTf]
  apply mul_le_mul' (le_refl _)
  apply setLIntegral_mono' measurableSet_Ioi
  intro s s_pos
  rw [← add_mul]
  apply mul_le_mul' ?_ (le_refl _)
  exact estimate_distribution_Subadditive_trunc s_pos (tc.ran_ton s s_pos) hA.le ht",2092.518023967743
