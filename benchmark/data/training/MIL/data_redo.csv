repo,file,decl,method,n,metric,model,annotation,syntax_search,mathlib_search,examples,improved_context,og_correct,og_errors,og_score,new_correct,new_errors,new_score,delta,og_raw,new_raw,time
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example (lbf : FnHasLb f) (lbg : FnHasLb g) : FnHasLb fun x ↦ f x + g x ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,5,True,,4,-0.2,"example (lbf : FnHasLb f) (lbg : FnHasLb g) : FnHasLb fun x ↦ f x + g x := by
  rcases lbf with ⟨a, lbfa⟩
  rcases lbg with ⟨b, lbgb⟩
  use a + b
  intro x
  exact add_le_add (lbfa x) (lbgb x)","example (lbf : FnHasLb f) (lbg : FnHasLb g) : FnHasLb fun x ↦ f x + g x  := by
  rcases lbf with ⟨a, lbfa⟩
  rcases lbg with ⟨b, lbgb⟩
  use a + b
  exact fun x ↦ add_le_add (lbfa x) (lbgb x)",37.70876598358154
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example {c : ℝ} (ubf : FnHasUb f) (h : c ≥ 0) : FnHasUb fun x ↦ c * f x ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,2,-0.5,"example {c : ℝ} (ubf : FnHasUb f) (h : c ≥ 0) : FnHasUb fun x ↦ c * f x := by
  rcases ubf with ⟨a, ubfa⟩
  use c * a
  intro x
  exact mul_le_mul_of_nonneg_left (ubfa x) h","example {c : ℝ} (ubf : FnHasUb f) (h : c ≥ 0) : FnHasUb fun x ↦ c * f x   := by
  rcases ubf with ⟨a, ubfa⟩
  exact ⟨c * a, fun x => mul_le_mul_of_nonneg_left (ubfa x) h⟩",31.688355922698975
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example (divab : a ∣ b) (divbc : b ∣ c) : a ∣ c ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,4,0.0,"example (divab : a ∣ b) (divbc : b ∣ c) : a ∣ c := by
  rcases divab with ⟨d, rfl⟩
  rcases divbc with ⟨e, rfl⟩
  use d * e; ring","example (divab : a ∣ b) (divbc : b ∣ c) : a ∣ c := by
  rcases divab with ⟨d, rfl⟩
  rcases divbc with ⟨e, rfl⟩
  use d * e; ring",26.803181171417236
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example (divab : a ∣ b) (divac : a ∣ c) : a ∣ b + c ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,4,0.0,"example (divab : a ∣ b) (divac : a ∣ c) : a ∣ b + c := by
  rcases divab with ⟨d, rfl⟩
  rcases divac with ⟨e, rfl⟩
  use d + e; ring","example (divab : a ∣ b) (divac : a ∣ c) : a ∣ b + c := by
  rcases divab with ⟨d, rfl⟩
  rcases divac with ⟨e, rfl⟩
  use d + e; ring",27.561439990997314
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,4,0.0,"example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x := by
  intro x
  use x / c
  dsimp; rw [mul_div_cancel₀ _ h]","example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x := by
  intro x
  use x / c
  dsimp; rw [mul_div_cancel₀ _ h]",28.00896716117859
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,3,True,,2,-0.3333333333333333,"example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x := by
  intro x
  use x / c
  field_simp","example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x  := by
  exact fun x => ⟨x / c, by field_simp⟩",25.418050050735474
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S03_The_Schroeder_Bernstein_Theorem.lean,theorem sb_injective (hf : Injective f) : Injective (sbFun f g) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,27,True,,4,-0.8518518518518519,"theorem sb_injective (hf : Injective f) : Injective (sbFun f g) := by
  set A := sbSet f g with A_def
  set h := sbFun f g with h_def
  intro x₁ x₂
  intro (hxeq : h x₁ = h x₂)
  show x₁ = x₂
  simp only [h_def, sbFun, ← A_def] at hxeq
  by_cases xA : x₁ ∈ A ∨ x₂ ∈ A
  · wlog x₁A : x₁ ∈ A generalizing x₁ x₂ hxeq xA
    · symm
      apply this hxeq.symm xA.symm (xA.resolve_left x₁A)
    have x₂A : x₂ ∈ A := by
      apply _root_.not_imp_self.mp
      intro (x₂nA : x₂ ∉ A)
      rw [if_pos x₁A, if_neg x₂nA] at hxeq
      rw [A_def, sbSet, mem_iUnion] at x₁A
      have x₂eq : x₂ = g (f x₁) := by
        rw [hxeq, sb_right_inv f g x₂nA]
      rcases x₁A with ⟨n, hn⟩
      rw [A_def, sbSet, mem_iUnion]
      use n + 1
      simp [sbAux]
      exact ⟨x₁, hn, x₂eq.symm⟩
    rw [if_pos x₁A, if_pos x₂A] at hxeq
    exact hf hxeq
  push_neg  at xA
  rw [if_neg xA.1, if_neg xA.2] at hxeq
  rw [← sb_right_inv f g xA.1, hxeq, sb_right_inv f g xA.2]","theorem sb_injective (hf : Injective f) : Injective (sbFun f g)  := by
  intro x₁ x₂ hxeq
  simp only [sbFun, sbSet] at hxeq
  by_cases x₁A : x₁ ∈ sbSet f g
  rw [if_pos x₁A] at hxeq
  by_cases x₂A : x₂ ∈ sbSet f g
  rw [if_pos x₂A] at hxeq
  exact hf hxeq
  rw [if_neg x₂A] at hxeq
  exfalso; exact x₂A (let ⟨n, hn⟩ := (sb_right_inv f g x₂A).symm ▸ mem_image_of_mem _ hn in hn),",57.879273891448975
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,"theorem sum_sqr (n : ℕ) : ∑ i in range (n + 1), i ^ 2 = n * (n + 1) * (2 * n + 1) / 6 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"theorem sum_sqr (n : ℕ) : ∑ i in range (n + 1), i ^ 2 = n * (n + 1) * (2 * n + 1) / 6 := by
  symm;
  apply Nat.div_eq_of_eq_mul_right (by norm_num : 0 < 6)
  induction' n with n ih
  · simp
  rw [Finset.sum_range_succ, mul_add 6, ← ih]
  ring","theorem sum_sqr (n : ℕ) : ∑ i in range (n + 1), i ^ 2 = n * (n + 1) * (2 * n + 1) / 6 := by
  symm;
  apply Nat.div_eq_of_eq_mul_right (by norm_num : 0 < 6)
  induction' n with n ih
  · simp
  rw [Finset.sum_range_succ, mul_add 6, ← ih]
  ring",34.10222005844116
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem zero_add (n : MyNat) : add zero n = n ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,3,True,,2,-0.3333333333333333,"theorem zero_add (n : MyNat) : add zero n = n := by
  induction' n with n ih
  · rfl
  rw [add, ih]","theorem zero_add (n : MyNat) : add zero n = n  := by
  induction n with _ ih",33.33470797538757
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem succ_add (m n : MyNat) : add (succ m) n = succ (add m n) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,4,0.0,"theorem succ_add (m n : MyNat) : add (succ m) n = succ (add m n) := by
  induction' n with n ih
  · rfl
  rw [add, ih]
  rfl","theorem succ_add (m n : MyNat) : add (succ m) n = succ (add m n) := by
  induction' n with n ih
  · rfl
  rw [add, ih]
  rfl",34.632753133773804
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem add_comm (m n : MyNat) : add m n = add n m ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,4,0.0,"theorem add_comm (m n : MyNat) : add m n = add n m := by
  induction' n with n ih
  · rw [zero_add]
    rfl
  rw [add, succ_add, ih]","theorem add_comm (m n : MyNat) : add m n = add n m := by
  induction' n with n ih
  · rw [zero_add]
    rfl
  rw [add, succ_add, ih]",28.84392213821411
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem add_assoc (m n k : MyNat) : add (add m n) k = add m (add n k) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,3,-0.25,"theorem add_assoc (m n k : MyNat) : add (add m n) k = add m (add n k) := by
  induction' k with k ih
  · rfl
  rw [add, ih]
  rfl","theorem add_assoc (m n k : MyNat) : add (add m n) k = add m (add n k)  := by
  induction k with
  | rfl
  | rw [add, ih]; rfl",26.803868770599365
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem mul_add (m n k : MyNat) : mul m (add n k) = add (mul m n) (mul m k) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,3,True,,2,-0.3333333333333333,"theorem mul_add (m n k : MyNat) : mul m (add n k) = add (mul m n) (mul m k) := by
  induction' k with k ih
  · rfl
  rw [add, mul, mul, ih, add_assoc]","theorem mul_add (m n k : MyNat) : mul m (add n k) = add (mul m n) (mul m k)  := by
  induction k with
  rfl",29.716659784317017
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem zero_mul (n : MyNat) : mul zero n = zero ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,2,-0.5,"theorem zero_mul (n : MyNat) : mul zero n = zero := by
  induction' n with n ih
  · rfl
  rw [mul, ih]
  rfl","theorem zero_mul (n : MyNat) : mul zero n = zero  := by
  induction n with _ ih",27.371922254562378
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem succ_mul (m n : MyNat) : mul (succ m) n = add (mul m n) n ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,4,0.0,"theorem succ_mul (m n : MyNat) : mul (succ m) n = add (mul m n) n := by
  induction' n with n ih
  · rfl
  rw [mul, mul, ih, add_assoc, add_assoc, add_comm n, succ_add]
  rfl","theorem succ_mul (m n : MyNat) : mul (succ m) n = add (mul m n) n := by
  induction' n with n ih
  · rfl
  rw [mul, mul, ih, add_assoc, add_assoc, add_comm n, succ_add]
  rfl",36.94179391860962
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem mul_comm (m n : MyNat) : mul m n = mul n m ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,4,True,,4,0.0,"theorem mul_comm (m n : MyNat) : mul m n = mul n m := by
  induction' n with n ih
  · rw [zero_mul]
    rfl
  rw [mul, ih, succ_mul]","theorem mul_comm (m n : MyNat) : mul m n = mul n m := by
  induction' n with n ih
  · rw [zero_mul]
    rfl
  rw [mul, ih, succ_mul]",42.59955286979675
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,instance : Nontrivial GaussInt ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,3,True,,2,-0.3333333333333333,"instance : Nontrivial GaussInt := by
  use 0, 1
  rw [Ne, GaussInt.ext_iff]
  simp","instance : Nontrivial GaussInt  := by
  use 0, 1
  simp [GaussInt.ext_iff]",52.21368408203125
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean, instance  1000 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,3,True,,3,0.0,"instance : Nontrivial GaussInt := by
  use 0, 1
  rw [Ne, GaussInt.ext_iff]
  simp","instance : Nontrivial GaussInt := by
  use 0, 1
  rw [Ne, GaussInt.ext_iff]
  simp",47.511590003967285
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean, instance ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,3,True,,3,0.0,"instance : Nontrivial GaussInt := by
  use 0, 1
  rw [Ne, GaussInt.ext_iff]
  simp","instance : Nontrivial GaussInt := by
  use 0, 1
  rw [Ne, GaussInt.ext_iff]
  simp",48.27699613571167
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,theorem div'_add_mod' (a b : ℤ) : b * div' a b + mod' a b = a ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,2,True,,2,0.0,"theorem div'_add_mod' (a b : ℤ) : b * div' a b + mod' a b = a := by
  rw [div', mod']
  linarith [Int.ediv_add_emod (a + b / 2) b]","theorem div'_add_mod' (a b : ℤ) : b * div' a b + mod' a b = a := by
  rw [div', mod']
  linarith [Int.ediv_add_emod (a + b / 2) b]",43.6412410736084
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,theorem abs_mod'_le (a b : ℤ) (h : 0 < b) : |mod' a b| ≤ b / 2 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,9,True,,4,-0.5555555555555556,"theorem abs_mod'_le (a b : ℤ) (h : 0 < b) : |mod' a b| ≤ b / 2 := by
  rw [mod', abs_le]
  constructor
  · linarith [Int.emod_nonneg (a + b / 2) h.ne']
  have := Int.emod_lt_of_pos (a + b / 2) h
  have := Int.ediv_add_emod b 2
  have := Int.emod_lt_of_pos b zero_lt_two
  revert this; intro this -- FIXME, this should not be needed
  linarith","theorem abs_mod'_le (a b : ℤ) (h : 0 < b) : |mod' a b| ≤ b / 2  := by
  rw [mod', abs_le]; constructor
  linarith [Int.emod_nonneg (a + b / 2) h.ne']
  linarith [Int.emod_lt_of_pos (a + b / 2) h, Int.ediv_add_emod b 2, Int.emod_lt_of_pos b zero_lt_two]",57.5874400138855
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,theorem mod'_eq (a b : ℤ) : mod' a b = a - b * div' a b ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,1,True,,1,0.0,theorem mod'_eq (a b : ℤ) : mod' a b = a - b * div' a b := by linarith [div'_add_mod' a b],theorem mod'_eq (a b : ℤ) : mod' a b = a - b * div' a b := by linarith [div'_add_mod' a b],56.14135789871216
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,private theorem aux {α : Type*} [LinearOrderedRing α] {x y : α} (h : x ^ 2 + y ^ 2 = 0) : x = 0 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,3,True,,3,0.0,"private theorem aux {α : Type*} [LinearOrderedRing α] {x y : α} (h : x ^ 2 + y ^ 2 = 0) : x = 0 :=
  haveI h' : x ^ 2 = 0 := by
    apply le_antisymm _ (sq_nonneg x)
    rw [← h]
    apply le_add_of_nonneg_right (sq_nonneg y)
  pow_eq_zero h'","private theorem aux {α : Type*} [LinearOrderedRing α] {x y : α} (h : x ^ 2 + y ^ 2 = 0) : x = 0 :=
  haveI h' : x ^ 2 = 0 := by
    apply le_antisymm _ (sq_nonneg x)
    rw [← h]
    apply le_add_of_nonneg_right (sq_nonneg y)
  pow_eq_zero h'",66.42509889602661
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,"theorem sq_add_sq_eq_zero {α : Type*} [LinearOrderedRing α] (x y : α) :
    x ^ 2 + y ^ 2 = 0 ↔ x = 0 ∧ y = 0 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,8,True,,5,-0.375,"theorem sq_add_sq_eq_zero {α : Type*} [LinearOrderedRing α] (x y : α) :
    x ^ 2 + y ^ 2 = 0 ↔ x = 0 ∧ y = 0 := by
  constructor
  · intro h
    constructor
    · exact aux h
    rw [add_comm] at h
    exact aux h
  rintro ⟨rfl, rfl⟩
  norm_num","theorem sq_add_sq_eq_zero {α : Type*} [LinearOrderedRing α] (x y : α) :
    x ^ 2 + y ^ 2 = 0 ↔ x = 0 ∧ y = 0   := by
  constructor
  · exact fun h => ⟨aux h, aux (by rwa [add_comm])⟩
  · rintro ⟨rfl, rfl⟩; norm_num",58.16789412498474
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,"@[simp]
theorem norm_nonneg (x : GaussInt) : 0 ≤ norm x ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,3,True,,1,-0.6666666666666666,"@[simp]
theorem norm_nonneg (x : GaussInt) : 0 ≤ norm x := by
  apply add_nonneg <;>
  apply sq_nonneg","@[simp]
theorem norm_nonneg (x : GaussInt) : 0 ≤ norm x  := by
  exact add_nonneg (sq_nonneg _) (sq_nonneg _)",48.8740758895874
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,theorem norm_eq_zero (x : GaussInt) : norm x = 0 ↔ x = 0 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,2,True,,1,-0.5,"theorem norm_eq_zero (x : GaussInt) : norm x = 0 ↔ x = 0 := by
  rw [norm, sq_add_sq_eq_zero, GaussInt.ext_iff]
  rfl","theorem norm_eq_zero (x : GaussInt) : norm x = 0 ↔ x = 0  := by
  simp [norm, sq_add_sq_eq_zero, GaussInt.ext_iff]",60.600545167922974
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,theorem norm_pos (x : GaussInt) : 0 < norm x ↔ x ≠ 0 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,2,True,,2,0.0,"theorem norm_pos (x : GaussInt) : 0 < norm x ↔ x ≠ 0 := by
  rw [lt_iff_le_and_ne, ne_comm, Ne, norm_eq_zero]
  simp [norm_nonneg]","theorem norm_pos (x : GaussInt) : 0 < norm x ↔ x ≠ 0 := by
  rw [lt_iff_le_and_ne, ne_comm, Ne, norm_eq_zero]
  simp [norm_nonneg]",58.81213998794556
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,theorem norm_mul (x y : GaussInt) : norm (x * y) = norm x * norm y ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,2,True,,2,0.0,"theorem norm_mul (x y : GaussInt) : norm (x * y) = norm x * norm y := by
  simp [norm]
  ring","theorem norm_mul (x y : GaussInt) : norm (x * y) = norm x * norm y := by
  simp [norm]
  ring",54.624208211898804
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,theorem norm_conj (x : GaussInt) : norm (conj x) = norm x ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,1,True,,1,0.0,theorem norm_conj (x : GaussInt) : norm (conj x) = norm x := by simp [norm],theorem norm_conj (x : GaussInt) : norm (conj x) = norm x := by simp [norm],54.54850101470947
Tests,Tests/MIL/C06_Structures/solutions/Solutions_S03_Building_the_Gaussian_Integers.lean,"theorem norm_mod_lt (x : GaussInt) {y : GaussInt} (hy : y ≠ 0) :
    (x % y).norm < y.norm ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,25,True,,2,-0.92,"theorem norm_mod_lt (x : GaussInt) {y : GaussInt} (hy : y ≠ 0) :
    (x % y).norm < y.norm := by
  have norm_y_pos : 0 < norm y := by rwa [norm_pos]
  have H1 : x % y * conj y = ⟨Int.mod' (x * conj y).re (norm y), Int.mod' (x * conj y).im (norm y)⟩
  · ext <;> simp [Int.mod'_eq, mod_def, div_def, norm] <;> ring
  have H2 : norm (x % y) * norm y ≤ norm y / 2 * norm y
  · calc
      norm (x % y) * norm y = norm (x % y * conj y) := by simp only [norm_mul, norm_conj]
      _ = |Int.mod' (x.re * y.re + x.im * y.im) (norm y)| ^ 2
          + |Int.mod' (-(x.re * y.im) + x.im * y.re) (norm y)| ^ 2 := by simp [H1, norm, sq_abs]
      _ ≤ (y.norm / 2) ^ 2 + (y.norm / 2) ^ 2 := by gcongr <;> apply Int.abs_mod'_le _ _ norm_y_pos
      _ = norm y / 2 * (norm y / 2 * 2) := by ring
      _ ≤ norm y / 2 * norm y := by gcongr; apply Int.ediv_mul_le; norm_num
  calc norm (x % y) ≤ norm y / 2 := le_of_mul_le_mul_right H2 norm_y_pos
    _ < norm y := by
        apply Int.ediv_lt_of_lt_mul
        · norm_num
        · linarith","theorem norm_mod_lt (x : GaussInt) {y : GaussInt} (hy : y ≠ 0) :
    (x % y).norm < y.norm  := by
  rw [← norm_pos] at hy
  calc norm (x % y) * norm y = norm (x % y * conj y) := by simp [norm_mul, norm_conj]
  _ = (Int.mod' (x * conj y).re (norm y))^2 + (Int.mod' (x * conj y).im (norm y))^2 := by simp [mod_def, div_def, norm, Int.mod'_eq] <;> ring
  _ ≤ (norm y / 2)^2 + (norm y / 2)^2 := by gcongr <;> apply Int.abs_mod'_le _ _ hy
  _ ≤ norm y / 2 * norm y := by ring
  _ ≤ norm y := le_of_mul_le_mul_right _ hy
  norm_num; linarith",98.09252977371216
