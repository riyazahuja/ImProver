repo,file,decl,method,n,metric,model,annotation,syntax_search,mathlib_search,examples,improved_context,og_correct,og_errors,og_score,new_correct,new_errors,new_score,delta,og_raw,new_raw,time
compfiles,Compfiles/Usa2001P4.lean,lemma lemma1 (a b c d : ℝ) : a * c + b * d ≤ Real.sqrt (a^2 + b^2) * Real.sqrt (c^2 + d^2) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,4,-0.3333333333333333,"lemma lemma1 (a b c d : ℝ) : a * c + b * d ≤ Real.sqrt (a^2 + b^2) * Real.sqrt (c^2 + d^2) := by
  let v1 : EuclideanSpace ℝ (Fin 2) := ![a, b]
  let v2 : EuclideanSpace ℝ (Fin 2) := ![c, d]
  have h2 : a * c + b * d ≤ |a * c + b * d| := le_abs_self _
  have h1 := abs_real_inner_le_norm v1 v2
  simp [EuclideanSpace.norm_eq] at h1
  exact h2.trans h1"," theorem lemma1 (a b c d : ℝ) : a * c + b * d ≤ Real.sqrt (a^2 + b^2) * Real.sqrt (c^2 + d^2)   := by
  let v1 : EuclideanSpace ℝ (Fin 2) := ![a, b]
  let v2 : EuclideanSpace ℝ (Fin 2) := ![c, d]
  exact (le_abs_self _).trans (by simpa [EuclideanSpace.norm_eq] using abs_real_inner_le_norm v1 v2)",40.685263872146606
compfiles,Compfiles/Imo2000P2.lean,"lemma lemma2 (a b c : ℝ) (ha : 0 < a) (hb : 0 < b)
    (habc : a * b * c = 1) :
    ∃ x y z : ℝ, 0 < x ∧ 0 < y ∧ 0 < z ∧
                 a = x / y ∧ b = y / z ∧ c = z / x ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,3,-0.5,"lemma lemma2 (a b c : ℝ) (ha : 0 < a) (hb : 0 < b)
    (habc : a * b * c = 1) :
    ∃ x y z : ℝ, 0 < x ∧ 0 < y ∧ 0 < z ∧
                 a = x / y ∧ b = y / z ∧ c = z / x := by
  refine ⟨a, 1, (1/b), ha, zero_lt_one, ?_, ?_, ?_, ?_⟩
  · exact one_div_pos.mpr hb
  · exact (div_one a).symm
  · exact (one_div_one_div b).symm
  · field_simp; linarith","lemma lemma2 (a b c : ℝ) (ha : 0 < a) (hb : 0 < b)
    (habc : a * b * c = 1) :
    ∃ x y z : ℝ, 0 < x ∧ 0 < y ∧ 0 < z ∧
                 a = x / y ∧ b = y / z ∧ c = z / x  := by
  refine ⟨a, 1, 1 / b, ha, zero_lt_one, one_div_pos.mpr hb, (div_one a).symm, (one_div_one_div b).symm, ?_⟩
  field_simp; linarith",70.9581139087677
compfiles,Compfiles/Imo2008P5.lean,"problem imo2008_p5 (n k : ℕ) (hn : 0 < n)
    (hnk : n ≤ k) (he : Even (k - n))
    : Set.ncard (MSequence n k) * solution n k = Set.ncard (NSequence n k) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,4,-0.3333333333333333,"problem imo2008_p5 (n k : ℕ) (hn : 0 < n)
    (hnk : n ≤ k) (he : Even (k - n))
    : Set.ncard (MSequence n k) * solution n k = Set.ncard (NSequence n k) := by
  have hA : Set.Finite { f | NSequence n k f } := Set.toFinite _
  have hB : Set.Finite { f | MSequence n k f } := Set.toFinite _
  have h1 := lemma1 (Sequence n k) (NSequence n k) (MSequence n k) hA hB (ψ n k)
              (2 ^ (k - n))
              (claim n k hn hnk he)
  rw [←h1]
  push_cast
  rfl","problem imo2008_p5 (n k : ℕ) (hn : 0 < n)
    (hnk : n ≤ k) (he : Even (k - n))
    : Set.ncard (MSequence n k) * solution n k = Set.ncard (NSequence n k)  := by
  have hA : Set.Finite { f | NSequence n k f } := Set.toFinite _
  have hB : Set.Finite { f | MSequence n k f } := Set.toFinite _
  have h1 := lemma1 (Sequence n k) (NSequence n k) (MSequence n k) hA hB (ψ n k) (2 ^ (k - n)) (claim n k hn hnk he)
  simp [← h1, solution]",237.26693201065063
compfiles,Compfiles/Poland1998P4.lean,lemma a'_recurrence (n : ℕ) (hn : 2 ≤ n) : a' n = a' (n - 1) + a' (n / 2) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"lemma a'_recurrence (n : ℕ) (hn : 2 ≤ n) : a' n = a' (n - 1) + a' (n / 2) := by
  have : (a' n).val = (a' (n - 1) + a' (n / 2)).val := by
    rw [ZMod.val_add]
    simp_rw [a', a_recurrence n hn]
    rw [ZMod.val]
    simp
  exact zmod_ext _ _ this","lemma a'_recurrence (n : ℕ) (hn : 2 ≤ n) : a' n = a' (n - 1) + a' (n / 2) := by
  have : (a' n).val = (a' (n - 1) + a' (n / 2)).val := by
    rw [ZMod.val_add]
    simp_rw [a', a_recurrence n hn]
    rw [ZMod.val]
    simp
  exact zmod_ext _ _ this",34.97178316116333
compfiles,Compfiles/Imo2013P5.lean,"lemma fx_gt_xm1 {f : ℚ → ℝ} {x : ℚ} (hx : 1 ≤ x)
    (H1 : ∀ x y, 0 < x → 0 < y → f (x * y) ≤ f x * f y)
    (H2 : ∀ x y, 0 < x → 0 < y → f x + f y ≤ f (x + y))
    (H4 : ∀ n : ℕ, 0 < n → (n : ℝ) ≤ f n) :
    (x - 1 : ℝ) < f x ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,1,-0.8333333333333334,"lemma fx_gt_xm1 {f : ℚ → ℝ} {x : ℚ} (hx : 1 ≤ x)
    (H1 : ∀ x y, 0 < x → 0 < y → f (x * y) ≤ f x * f y)
    (H2 : ∀ x y, 0 < x → 0 < y → f x + f y ≤ f (x + y))
    (H4 : ∀ n : ℕ, 0 < n → (n : ℝ) ≤ f n) :
    (x - 1 : ℝ) < f x := by
  have hx0 :=
    calc (x - 1 : ℝ)
          < ⌊x⌋₊   := by exact_mod_cast Nat.sub_one_lt_floor x
        _ ≤ f ⌊x⌋₊ := H4 _ (Nat.floor_pos.2 hx)

  obtain h_eq | h_lt := (Nat.floor_le $ zero_le_one.trans hx).eq_or_lt
  · rwa [h_eq] at hx0
  calc (x - 1 : ℝ) < f ⌊x⌋₊ := hx0
    _ < f (x - ⌊x⌋₊) + f ⌊x⌋₊ := lt_add_of_pos_left _ (f_pos_of_pos (sub_pos.mpr h_lt) H1 H4)
    _ ≤ f (x - ⌊x⌋₊ + ⌊x⌋₊)   := H2 _ _ (sub_pos.mpr h_lt) (Nat.cast_pos.2 (Nat.floor_pos.2 hx))
    _ = f x                   := by rw [sub_add_cancel]","lemma fx_gt_xm1 {f : ℚ → ℝ} {x : ℚ} (hx : 1 ≤ x)
    (H1 : ∀ x y, 0 < x → 0 < y → f (x * y) ≤ f x * f y)
    (H2 : ∀ x y, 0 < x → 0 < y → f x + f y ≤ f (x + y))
    (H4 : ∀ n : ℕ, 0 < n → (n : ℝ) ≤ f n) :
    (x - 1 : ℝ) < f x  := by
  calc (x - 1 : ℝ) < ⌊x⌋₊ := by exact_mod_cast Nat.sub_one_lt_floor x
    _ ≤ f ⌊x⌋₊ := H4 _ (Nat.floor_pos.2 hx)
    obtain h_eq | h_lt := (Nat.floor_le $ zero_le_one.trans hx).eq_or_lt",67.24069786071777
compfiles,Compfiles/Poland1998P4.lean,problem poland1998_p4 : Set.Infinite { n | 7 ∣ a n } ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"problem poland1998_p4 : Set.Infinite { n | 7 ∣ a n } := by
  apply Set.infinite_of_not_bddAbove
  intro h
  rw [bddAbove_def] at h
  obtain ⟨x, hx⟩ := h
  obtain ⟨y, hy1, hy2⟩ := poland1998_p4' x
  exact Nat.lt_le_asymm hy1 (hx y hy2)","problem poland1998_p4 : Set.Infinite { n | 7 ∣ a n } := by
  apply Set.infinite_of_not_bddAbove
  intro h
  rw [bddAbove_def] at h
  obtain ⟨x, hx⟩ := h
  obtain ⟨y, hy1, hy2⟩ := poland1998_p4' x
  exact Nat.lt_le_asymm hy1 (hx y hy2)",129.70911121368408
compfiles,Compfiles/Usa2018P1.lean,"lemma am_gm (a b : ℝ) (ha : 0 ≤ a) (hb : 0 ≤ b) :
    2 * (a * b) ^ ((1 : ℝ) / 2) ≤ a + b ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,6,True,,6,0.0,"lemma am_gm (a b : ℝ) (ha : 0 ≤ a) (hb : 0 ≤ b) :
    2 * (a * b) ^ ((1 : ℝ) / 2) ≤ a + b := by
  have hw : (0 : ℝ) ≤ 1/2 := by norm_num
  rw [Real.mul_rpow ha hb]
  have := Real.geom_mean_le_arith_mean2_weighted hw hw ha hb (by norm_num)
  linarith","lemma am_gm (a b : ℝ) (ha : 0 ≤ a) (hb : 0 ≤ b) :
    2 * (a * b) ^ ((1 : ℝ) / 2) ≤ a + b := by
  have hw : (0 : ℝ) ≤ 1/2 := by norm_num
  rw [Real.mul_rpow ha hb]
  have := Real.geom_mean_le_arith_mean2_weighted hw hw ha hb (by norm_num)
  linarith",43.48241114616394
compfiles,Compfiles/Imo2006P5.lean,"problem imo2006_p5 {P : Polynomial ℤ} (hP : 1 < P.natDegree) {k : ℕ} (hk : 0 < k) :
    (P.comp^[k] X - X).roots.toFinset.card ≤ P.natDegree ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"problem imo2006_p5 {P : Polynomial ℤ} (hP : 1 < P.natDegree) {k : ℕ} (hk : 0 < k) :
    (P.comp^[k] X - X).roots.toFinset.card ≤ P.natDegree := by
  refine (Finset.card_le_card fun t ht => ?_).trans (imo2006_p5' hP)
  have hP' : P.comp P - X ≠ 0 := by
    simpa [Nat.iterate] using Polynomial.iterate_comp_sub_X_ne hP zero_lt_two
  replace ht := isRoot_of_mem_roots (Multiset.mem_toFinset.1 ht)
  rw [IsRoot.def, eval_sub, iterate_comp_eval, eval_X, sub_eq_zero] at ht
  rw [Multiset.mem_toFinset, mem_roots hP', IsRoot.def, eval_sub, eval_comp, eval_X, sub_eq_zero]
  exact Polynomial.isPeriodicPt_eval_two ⟨k, hk, ht⟩","problem imo2006_p5 {P : Polynomial ℤ} (hP : 1 < P.natDegree) {k : ℕ} (hk : 0 < k) :
    (P.comp^[k] X - X).roots.toFinset.card ≤ P.natDegree := by
  refine (Finset.card_le_card fun t ht => ?_).trans (imo2006_p5' hP)
  have hP' : P.comp P - X ≠ 0 := by
    simpa [Nat.iterate] using Polynomial.iterate_comp_sub_X_ne hP zero_lt_two
  replace ht := isRoot_of_mem_roots (Multiset.mem_toFinset.1 ht)
  rw [IsRoot.def, eval_sub, iterate_comp_eval, eval_X, sub_eq_zero] at ht
  rw [Multiset.mem_toFinset, mem_roots hP', IsRoot.def, eval_sub, eval_comp, eval_X, sub_eq_zero]
  exact Polynomial.isPeriodicPt_eval_two ⟨k, hk, ht⟩",192.4393241405487
compfiles,Compfiles/Imo1998P2.lean,"theorem A_card_lower_bound [Fintype C] {z : ℕ} (hJ : Fintype.card J = 2 * z + 1) :
    2 * z * z * Fintype.card C ≤ (A r).card ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,8,True,,1,-0.875,"theorem A_card_lower_bound [Fintype C] {z : ℕ} (hJ : Fintype.card J = 2 * z + 1) :
    2 * z * z * Fintype.card C ≤ (A r).card := by
  have h : ∀ a, a ∈ A r → Prod.fst a ∈ @Finset.univ C _ := by intros; apply Finset.mem_univ
  apply Finset.mul_card_image_le_card_of_maps_to h
  intro c _
  rw [← A_fibre_over_contestant_card]
  apply distinct_judge_pairs_card_lower_bound r hJ","theorem A_card_lower_bound [Fintype C] {z : ℕ} (hJ : Fintype.card J = 2 * z + 1) :
    2 * z * z * Fintype.card C ≤ (A r).card  := by
  apply Finset.mul_card_image_le_card_of_maps_to (λ _ _, Finset.mem_univ _)",66.44271302223206
compfiles,Compfiles/Imo2007P5.lean,"problem imo2007_p5 (a b : ℤ) (ha : 0 < a) (hb : 0 < b)
    (hab : 4 * a * b - 1 ∣ (4 * a^2 - 1)^2) : a = b ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,4,-0.42857142857142855,"problem imo2007_p5 (a b : ℤ) (ha : 0 < a) (hb : 0 < b)
    (hab : 4 * a * b - 1 ∣ (4 * a^2 - 1)^2) : a = b := by
  lift a to ℕ using le_of_lt ha
  lift b to ℕ using le_of_lt hb
  have ha' : 0 < a := Int.ofNat_pos.mp ha
  have hb' : 0 < b := Int.ofNat_pos.mp hb
  have hg := generalized_imo2007_p5 (n := 4) (by norm_num) a b ha' hb' hab
  exact congrArg Nat.cast hg","problem imo2007_p5 (a b : ℤ) (ha : 0 < a) (hb : 0 < b)
    (hab : 4 * a * b - 1 ∣ (4 * a^2 - 1)^2) : a = b  := by
  lift a to ℕ using le_of_lt ha
  lift b to ℕ using le_of_lt hb
  exact congrArg Int.ofNat (generalized_imo2007_p5 (by norm_num) a b (Int.ofNat_pos.mp ha) (Int.ofNat_pos.mp hb) hab)",105.53579115867615
compfiles,Compfiles/Romania1998P12.lean,"lemma int_dichotomy (z : ℤ) : ∃ n : ℕ, (n:ℤ) = z ∨ -(n:ℤ) = z ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"lemma int_dichotomy (z : ℤ) : ∃ n : ℕ, (n:ℤ) = z ∨ -(n:ℤ) = z := by
  cases' z with z z
  · use z; left; simp only [Int.ofNat_eq_coe]
  · use z + 1; right; rfl","lemma int_dichotomy (z : ℤ) : ∃ n : ℕ, (n:ℤ) = z ∨ -(n:ℤ) = z := by
  cases' z with z z
  · use z; left; simp only [Int.ofNat_eq_coe]
  · use z + 1; right; rfl",188.51602792739868
compfiles,Compfiles/Imo1994P1.lean,theorem tedious (m : ℕ) (k : Fin (m + 1)) : m - (m + (m + 1 - ↑k)) % (m + 1) = ↑k ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"theorem tedious (m : ℕ) (k : Fin (m + 1)) : m - (m + (m + 1 - ↑k)) % (m + 1) = ↑k := by
  cases' k with k hk
  rw [Nat.lt_succ_iff, le_iff_exists_add] at hk
  rcases hk with ⟨c, rfl⟩
  have : k + c + (k + c + 1 - k) = c + (k + c + 1) := by
    simp only [add_assoc, add_tsub_cancel_left, add_left_comm]
  rw [Fin.val_mk, this, Nat.add_mod_right, Nat.mod_eq_of_lt, Nat.add_sub_cancel]
  omega","theorem tedious (m : ℕ) (k : Fin (m + 1)) : m - (m + (m + 1 - ↑k)) % (m + 1) = ↑k := by
  cases' k with k hk
  rw [Nat.lt_succ_iff, le_iff_exists_add] at hk
  rcases hk with ⟨c, rfl⟩
  have : k + c + (k + c + 1 - k) = c + (k + c + 1) := by
    simp only [add_assoc, add_tsub_cancel_left, add_left_comm]
  rw [Fin.val_mk, this, Nat.add_mod_right, Nat.mod_eq_of_lt, Nat.add_sub_cancel]
  omega",29.649757862091064
compfiles,Compfiles/Hungary1998P6.lean,"lemma sum_range_square_mul_six (n : ℕ) :
    (∑i ∈ Finset.range n, (i + 1)^2) * 6 = n * (n + 1) * (2 * n + 1) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"lemma sum_range_square_mul_six (n : ℕ) :
    (∑i ∈ Finset.range n, (i + 1)^2) * 6 = n * (n + 1) * (2 * n + 1) := by
  induction n with
  | zero => rfl
  | succ n ih =>
    rw [Finset.sum_range_succ, add_mul, ih]
    ring","lemma sum_range_square_mul_six (n : ℕ) :
    (∑i ∈ Finset.range n, (i + 1)^2) * 6 = n * (n + 1) * (2 * n + 1) := by
  induction n with
  | zero => rfl
  | succ n ih =>
    rw [Finset.sum_range_succ, add_mul, ih]
    ring",32.682225942611694
compfiles,Compfiles/Imo1998P2.lean,"theorem clear_denominators {a b k : ℕ} (ha : 0 < a) (hb : 0 < b) :
    (b - 1 : ℚ) / (2 * b) ≤ k / a ↔ ((b : ℕ) - 1) * a ≤ k * (2 * b) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,7,True,,7,0.0,"theorem clear_denominators {a b k : ℕ} (ha : 0 < a) (hb : 0 < b) :
    (b - 1 : ℚ) / (2 * b) ≤ k / a ↔ ((b : ℕ) - 1) * a ≤ k * (2 * b) := by
  rw [div_le_div_iff]
  -- porting note: proof used to finish with `<;> norm_cast <;> simp [ha, hb]`
  · convert Nat.cast_le (α := ℚ)
    · aesop
    · norm_cast
  all_goals simp [ha, hb]","theorem clear_denominators {a b k : ℕ} (ha : 0 < a) (hb : 0 < b) :
    (b - 1 : ℚ) / (2 * b) ≤ k / a ↔ ((b : ℕ) - 1) * a ≤ k * (2 * b) := by
  rw [div_le_div_iff]
  -- porting note: proof used to finish with `<;> norm_cast <;> simp [ha, hb]`
  · convert Nat.cast_le (α := ℚ)
    · aesop
    · norm_cast
  all_goals simp [ha, hb]",74.36784791946411
compfiles,Compfiles/Usa2003P1.lean,"lemma nat_mod_inv (a : ℕ) : ∃ b, (a + b) % 5 = 0 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,8,True,,8,0.0,"lemma nat_mod_inv (a : ℕ) : ∃ b, (a + b) % 5 = 0 := by
  use 5 - (a % 5)
  have h : a % 5 < 5 := Nat.mod_lt _ (by norm_num)
  have h' : a % 5 ≤ 5 := Nat.le_of_lt h
  rw[Nat.add_mod]
  have h2 : a % 5 = a % 5 % 5 := (Nat.mod_mod a 5).symm
  rw[h2, ← Nat.add_mod, Nat.mod_mod]
  rw[Nat.add_sub_of_le h']","lemma nat_mod_inv (a : ℕ) : ∃ b, (a + b) % 5 = 0 := by
  use 5 - (a % 5)
  have h : a % 5 < 5 := Nat.mod_lt _ (by norm_num)
  have h' : a % 5 ≤ 5 := Nat.le_of_lt h
  rw[Nat.add_mod]
  have h2 : a % 5 = a % 5 % 5 := (Nat.mod_mod a 5).symm
  rw[h2, ← Nat.add_mod, Nat.mod_mod]
  rw[Nat.add_sub_of_le h']",32.05333709716797
compfiles,Compfiles/Imo2000P2.lean,"problem imo2000_p2 (a b c : ℝ) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)
    (habc : a * b * c = 1) :
    (a - 1 + 1 / b) * (b - 1 + 1 / c) * (c - 1 + 1 / a) ≤ 1 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,8,True,,8,0.0,"problem imo2000_p2 (a b c : ℝ) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)
    (habc : a * b * c = 1) :
    (a - 1 + 1 / b) * (b - 1 + 1 / c) * (c - 1 + 1 / a) ≤ 1 := by
  -- we follow the solution from
  -- https://web.evanchen.cc/exams/IMO-2000-notes.pdf

  -- Let a = x/y, b = y/z, c = z/x for x, y, z > 0.
  obtain ⟨x,y,z, hx, hy, hz, rfl, rfl, rfl⟩ := lemma2 a b c ha hb habc
  have h1 := lemma1 x y z hx hy hz
  have h2 : 0 < y * z * x := by positivity
  suffices H :
      (x - y + z) * (y - z + x) * (z - x + y) ≤ (y * z * x) by
    field_simp
    exact (div_le_one h2).mpr H
  linarith","problem imo2000_p2 (a b c : ℝ) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)
    (habc : a * b * c = 1) :
    (a - 1 + 1 / b) * (b - 1 + 1 / c) * (c - 1 + 1 / a) ≤ 1 := by
  -- we follow the solution from
  -- https://web.evanchen.cc/exams/IMO-2000-notes.pdf

  -- Let a = x/y, b = y/z, c = z/x for x, y, z > 0.
  obtain ⟨x,y,z, hx, hy, hz, rfl, rfl, rfl⟩ := lemma2 a b c ha hb habc
  have h1 := lemma1 x y z hx hy hz
  have h2 : 0 < y * z * x := by positivity
  suffices H :
      (x - y + z) * (y - z + x) * (z - x + y) ≤ (y * z * x) by
    field_simp
    exact (div_le_one h2).mpr H
  linarith",81.02615189552307
compfiles,Compfiles/Imo2009P5.lean,"lemma exists_sup_fn_fin (f : ℕ → ℕ) (c : ℕ) : ∃ K : ℕ, ∀ n : ℕ, n < c → f n ≤ K ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,8,True,,8,0.0,"lemma exists_sup_fn_fin (f : ℕ → ℕ) (c : ℕ) : ∃ K : ℕ, ∀ n : ℕ, n < c → f n ≤ K := by
  induction' c with c ih
  · simp
  · obtain ⟨k, hk⟩ := ih
    use max k (f c)
    intro n hn
    obtain hlt | rfl := Nat.lt_succ_iff_lt_or_eq.mp hn <;> aesop","lemma exists_sup_fn_fin (f : ℕ → ℕ) (c : ℕ) : ∃ K : ℕ, ∀ n : ℕ, n < c → f n ≤ K := by
  induction' c with c ih
  · simp
  · obtain ⟨k, hk⟩ := ih
    use max k (f c)
    intro n hn
    obtain hlt | rfl := Nat.lt_succ_iff_lt_or_eq.mp hn <;> aesop",40.401287317276
compfiles,Compfiles/Imo2007P5.lean,"lemma bad_symm {n : ℤ} {a b : ℕ} (h : n * a * b - 1 ∣ (n * a ^ 2 - 1) ^ 2) :
  n * b * a - 1 ∣ (n * b ^ 2 - 1) ^ 2 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,8,True,,8,0.0,"lemma bad_symm {n : ℤ} {a b : ℕ} (h : n * a * b - 1 ∣ (n * a ^ 2 - 1) ^ 2) :
  n * b * a - 1 ∣ (n * b ^ 2 - 1) ^ 2 := by
  rw [mul_right_comm, sub_sq', add_comm, mul_right_comm _ _ (1 : ℤ), ← sub_sq']
  replace h := dvd_mul_of_dvd_left h ((n * b ^ 2) ^ 2)
  rw [← mul_pow, sub_one_mul, mul_mul_mul_comm, ← sq, ← mul_pow, ← mul_pow, ← mul_assoc] at h
  rw [← Int.modEq_zero_iff_dvd] at h ⊢
  revert h
  refine ((Int.ModEq.sub_right _ ?_).pow _).trans
  nth_rewrite 1 [← one_pow 2]
  exact ((n * a * b).modEq_sub 1).symm.pow 2","lemma bad_symm {n : ℤ} {a b : ℕ} (h : n * a * b - 1 ∣ (n * a ^ 2 - 1) ^ 2) :
  n * b * a - 1 ∣ (n * b ^ 2 - 1) ^ 2 := by
  rw [mul_right_comm, sub_sq', add_comm, mul_right_comm _ _ (1 : ℤ), ← sub_sq']
  replace h := dvd_mul_of_dvd_left h ((n * b ^ 2) ^ 2)
  rw [← mul_pow, sub_one_mul, mul_mul_mul_comm, ← sq, ← mul_pow, ← mul_pow, ← mul_assoc] at h
  rw [← Int.modEq_zero_iff_dvd] at h ⊢
  revert h
  refine ((Int.ModEq.sub_right _ ?_).pow _).trans
  nth_rewrite 1 [← one_pow 2]
  exact ((n * a * b).modEq_sub 1).symm.pow 2",52.39423108100891
compfiles,Compfiles/Imo2014P1.lean,"lemma lemma0 {p : ℕ → Prop} (h : ∃! n, p (n + 1)) : (∃! n, 0 < n ∧ p n) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,8,True,,8,0.0,"lemma lemma0 {p : ℕ → Prop} (h : ∃! n, p (n + 1)) : (∃! n, 0 < n ∧ p n) := by
  obtain ⟨n, hn1, hn2⟩ := h
  use n + 1
  refine ⟨⟨Nat.succ_pos n, hn1⟩, ?_⟩
  rintro m ⟨hm1, hm2⟩
  have hm3 := hn2 (m - 1)
  dsimp only at hm3
  rw [Nat.sub_add_cancel hm1] at hm3
  exact Nat.eq_add_of_sub_eq hm1 (hm3 hm2)","lemma lemma0 {p : ℕ → Prop} (h : ∃! n, p (n + 1)) : (∃! n, 0 < n ∧ p n) := by
  obtain ⟨n, hn1, hn2⟩ := h
  use n + 1
  refine ⟨⟨Nat.succ_pos n, hn1⟩, ?_⟩
  rintro m ⟨hm1, hm2⟩
  have hm3 := hn2 (m - 1)
  dsimp only at hm3
  rw [Nat.sub_add_cancel hm1] at hm3
  exact Nat.eq_add_of_sub_eq hm1 (hm3 hm2)",48.19637107849121
compfiles,Compfiles/Imo2013P5.lean,"/--
 Like le_of_all_pow_lt_succ, but with a weaker assumption for y.
-/
 theorem le_of_all_pow_lt_succ' {x y : ℝ} (hx : 1 < x) (hy : 0 < y)
    (h : ∀ n : ℕ, 0 < n → x^n - 1 < y^n) :
    x ≤ y ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,8,True,,8,0.0,"/--
 Like le_of_all_pow_lt_succ, but with a weaker assumption for y.
-/
lemma le_of_all_pow_lt_succ' {x y : ℝ} (hx : 1 < x) (hy : 0 < y)
    (h : ∀ n : ℕ, 0 < n → x^n - 1 < y^n) :
    x ≤ y := by
  refine le_of_all_pow_lt_succ hx ?_ h
  by_contra! hy''

  -- Then there exists y' such that 0 < y ≤ 1 < y' < x.
  obtain ⟨y', h1_lt_y', h_y'_lt_x⟩ := exists_between hx

  have h_y_lt_y' : y < y' := hy''.trans_lt h1_lt_y'
  have hh : ∀ n, 0 < n → x^n - 1 < y'^n := by
    intro n hn
    calc x^n - 1 < y^n  := h n hn
         _  ≤ y'^n := pow_le_pow_left hy.le h_y_lt_y'.le n

  exact h_y'_lt_x.not_le (le_of_all_pow_lt_succ hx h1_lt_y' hh)","/--
 Like le_of_all_pow_lt_succ, but with a weaker assumption for y.
-/
lemma le_of_all_pow_lt_succ' {x y : ℝ} (hx : 1 < x) (hy : 0 < y)
    (h : ∀ n : ℕ, 0 < n → x^n - 1 < y^n) :
    x ≤ y := by
  refine le_of_all_pow_lt_succ hx ?_ h
  by_contra! hy''

  -- Then there exists y' such that 0 < y ≤ 1 < y' < x.
  obtain ⟨y', h1_lt_y', h_y'_lt_x⟩ := exists_between hx

  have h_y_lt_y' : y < y' := hy''.trans_lt h1_lt_y'
  have hh : ∀ n, 0 < n → x^n - 1 < y'^n := by
    intro n hn
    calc x^n - 1 < y^n  := h n hn
         _  ≤ y'^n := pow_le_pow_left hy.le h_y_lt_y'.le n

  exact h_y'_lt_x.not_le (le_of_all_pow_lt_succ hx h1_lt_y' hh)",45.95496106147766
compfiles,Compfiles/Imo2013P5.lean,"lemma f_pos_of_pos {f : ℚ → ℝ} {q : ℚ} (hq : 0 < q)
    (H1 : ∀ x y, 0 < x → 0 < y → f (x * y) ≤ f x * f y)
    (H4 : ∀ n : ℕ, 0 < n → (n : ℝ) ≤ f n) :
    0 < f q ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,9,True,,1,-0.8888888888888888,"lemma f_pos_of_pos {f : ℚ → ℝ} {q : ℚ} (hq : 0 < q)
    (H1 : ∀ x y, 0 < x → 0 < y → f (x * y) ≤ f x * f y)
    (H4 : ∀ n : ℕ, 0 < n → (n : ℝ) ≤ f n) :
    0 < f q := by
  have hfqn := calc f q.num = f (q * q.den) := by rw [←Rat.mul_den_eq_num]
                    _ ≤ f q * f q.den := H1 q q.den hq (Nat.cast_pos.mpr q.pos)

  -- Now we just need to show that `f q.num` and `f q.denom` are positive.
  -- Then nlinarith will be able to close the goal.
  have num_pos : 0 < q.num := Rat.num_pos.mpr hq
  have hqna : (q.num.natAbs : ℤ) = q.num := Int.natAbs_of_nonneg num_pos.le

  have hqfn' := calc (q.num : ℝ)
         = ((q.num.natAbs : ℤ) : ℝ) := congr_arg Int.cast (Eq.symm hqna)
       _ ≤ f q.num.natAbs           := H4 q.num.natAbs
                                            (Int.natAbs_pos.mpr (ne_of_gt num_pos))
       _ = f q.num                   := by rw [Nat.cast_natAbs, abs_of_nonneg num_pos.le]

  have f_num_pos := calc (0 : ℝ) < q.num := Int.cast_pos.mpr num_pos
                         _ ≤ f q.num     := hqfn'

  have f_den_pos := calc (0 : ℝ) < q.den := Nat.cast_pos.mpr q.pos
                         _ ≤ f q.den     := H4 q.den q.pos

  nlinarith"," theorem f_pos_of_pos {f : ℚ → ℝ} {q : ℚ} (hq : 0 < q)
    (H1 : ∀ x y, 0 < x → 0 < y → f (x * y) ≤ f x * f y)
    (H4 : ∀ n : ℕ, 0 < n → (n : ℝ) ≤ f n) :
    0 < f q   := by
  calc
  0 < q.num := Rat.num_pos.mpr hq
  _ ≤ f q.num := H4 q.num.natAbs (Int.natAbs_pos.mpr (ne_of_gt (Rat.num_pos.mpr hq)))
  _ = f (q * q.den) := by rw [←Rat.mul_den_eq_num]
  _ ≤ f q * f q.den := H1 q q.den hq (Nat.cast_pos.mpr q.pos)
  have f_den_pos : 0 < f q.den := calc (0 : ℝ) < q.den := Nat.cast_pos.mpr q.pos
  _ ≤ f q.den := H4 q.den q.pos
  nlinarith",56.37684392929077
compfiles,Compfiles/Imo1998P2.lean,"theorem A_fibre_over_judgePair_card {p : JudgePair J} (h : p.Distinct) :
    (agreedContestants r p).card =
      ((A r).filter fun a : AgreedTriple C J => a.judgePair = p).card ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,9,True,,2,-0.7777777777777778,"theorem A_fibre_over_judgePair_card {p : JudgePair J} (h : p.Distinct) :
    (agreedContestants r p).card =
      ((A r).filter fun a : AgreedTriple C J => a.judgePair = p).card := by
  rw [A_fibre_over_judgePair r h]
  apply Finset.card_image_of_injOn
  -- Porting note (#10936): used to be `tidy`
  unfold Set.InjOn; intros; ext; all_goals aesop","theorem A_fibre_over_judgePair_card {p : JudgePair J} (h : p.Distinct) :
    (agreedContestants r p).card =
      ((A r).filter fun a : AgreedTriple C J => a.judgePair = p).card  := by
  rw [A_fibre_over_judgePair r h]
  apply Finset.card_image_of_injective _ Prod.ext_iff.mpr
  exact λ x₁ x₂ h, Prod.ext (Prod.mk_inj h).1 rfl",38.49938702583313
compfiles,Compfiles/Bulgaria1998P11.lean,lemma mod_plus_pow (m n : ℕ) : (m + 3)^n % 3 = m^n % 3 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,9,True,,9,0.0,"lemma mod_plus_pow (m n : ℕ) : (m + 3)^n % 3 = m^n % 3 := by
  induction' n with pn hpn
  · simp only [Nat.zero_eq, pow_zero, Nat.one_mod]
  · rw [Nat.pow_succ']
    have h1 : (m + 3) * (m + 3) ^ pn = m * (m + 3) ^ pn + 3 * (m + 3) ^ pn := by ring
    rw [h1]
    have h2 : 3 * (m + 3) ^ pn % 3 = 0 := Nat.mul_mod_right 3 _
    rw[Nat.add_mod, h2, add_zero, Nat.mod_mod, Nat.pow_succ']
    exact Nat.ModEq.mul rfl hpn","lemma mod_plus_pow (m n : ℕ) : (m + 3)^n % 3 = m^n % 3 := by
  induction' n with pn hpn
  · simp only [Nat.zero_eq, pow_zero, Nat.one_mod]
  · rw [Nat.pow_succ']
    have h1 : (m + 3) * (m + 3) ^ pn = m * (m + 3) ^ pn + 3 * (m + 3) ^ pn := by ring
    rw [h1]
    have h2 : 3 * (m + 3) ^ pn % 3 = 0 := Nat.mul_mod_right 3 _
    rw[Nat.add_mod, h2, add_zero, Nat.mod_mod, Nat.pow_succ']
    exact Nat.ModEq.mul rfl hpn",41.99984121322632
compfiles,Compfiles/Imo1998P2.lean,"theorem A_fibre_over_contestant_card (c : C) :
    (Finset.univ.filter fun p : JudgePair J => p.Agree r c ∧ p.Distinct).card =
      ((A r).filter fun a : AgreedTriple C J => a.contestant = c).card ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,9,True,,6,-0.3333333333333333,"theorem A_fibre_over_contestant_card (c : C) :
    (Finset.univ.filter fun p : JudgePair J => p.Agree r c ∧ p.Distinct).card =
      ((A r).filter fun a : AgreedTriple C J => a.contestant = c).card := by
  rw [A_fibre_over_contestant r]
  apply Finset.card_image_of_injOn
  -- Porting note (#10936): used to be `tidy`. TODO: remove `ext` after `extCore` to `aesop`.
  unfold Set.InjOn; intros; ext; all_goals aesop","theorem A_fibre_over_contestant_card (c : C) :
    (Finset.univ.filter fun p : JudgePair J => p.Agree r c ∧ p.Distinct).card =
      ((A r).filter fun a : AgreedTriple C J => a.contestant = c).card  := by
  rw [A_fibre_over_contestant r]
  apply Finset.card_image_of_injOn
  intros x₁ hx x₂ hy h
  have : x₁ = x₂ := by aesop
  congr",124.67919516563416
compfiles,Compfiles/Imo1998P2.lean,"theorem A_card_upper_bound {k : ℕ}
    (hk : ∀ p : JudgePair J, p.Distinct → (agreedContestants r p).card ≤ k) :
    (A r).card ≤ k * (Fintype.card J * Fintype.card J - Fintype.card J) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,11,True,,11,0.0,"theorem A_card_upper_bound {k : ℕ}
    (hk : ∀ p : JudgePair J, p.Distinct → (agreedContestants r p).card ≤ k) :
    (A r).card ≤ k * (Fintype.card J * Fintype.card J - Fintype.card J) := by
  change _ ≤ k * (Finset.card _ * Finset.card _ - Finset.card _)
  rw [← Finset.offDiag_card]
  apply Finset.card_le_mul_card_image_of_maps_to (A_maps_to_offDiag_judgePair r)
  intro p hp
  have hp' : p.Distinct := by simp [Finset.mem_offDiag] at hp; exact hp
  rw [← A_fibre_over_judgePair_card r hp']; apply hk; exact hp'","theorem A_card_upper_bound {k : ℕ}
    (hk : ∀ p : JudgePair J, p.Distinct → (agreedContestants r p).card ≤ k) :
    (A r).card ≤ k * (Fintype.card J * Fintype.card J - Fintype.card J) := by
  change _ ≤ k * (Finset.card _ * Finset.card _ - Finset.card _)
  rw [← Finset.offDiag_card]
  apply Finset.card_le_mul_card_image_of_maps_to (A_maps_to_offDiag_judgePair r)
  intro p hp
  have hp' : p.Distinct := by simp [Finset.mem_offDiag] at hp; exact hp
  rw [← A_fibre_over_judgePair_card r hp']; apply hk; exact hp'",48.23567080497742
compfiles,Compfiles/Poland1998P4.lean,"lemma lemma3
    (N0 : ℕ)
    (k : ZMod 7)
    (hk : k ≠ 0)
    (hN : ∀ i : ℕ, i < 7 → a' (N0 + i) = a' N0 + k * i) :
    (∃ i : ℕ, i < 7 ∧ a' (N0 + i) = 0) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,9,True,,8,-0.1111111111111111,"lemma lemma3
    (N0 : ℕ)
    (k : ZMod 7)
    (hk : k ≠ 0)
    (hN : ∀ i : ℕ, i < 7 → a' (N0 + i) = a' N0 + k * i) :
    (∃ i : ℕ, i < 7 ∧ a' (N0 + i) = 0) := by
  have hp : Fact (Nat.Prime 7) := ⟨by norm_num⟩
  let ii := - (a' N0) / k
  use ii.val
  constructor
  · exact ZMod.val_lt ii
  · have := hN ii.val (ZMod.val_lt ii)
    rw [this, ZMod.natCast_val, ZMod.cast_id', id_def, mul_div_cancel₀ _ hk]
    exact add_neg_self (a' N0)","lemma lemma3
    (N0 : ℕ)
    (k : ZMod 7)
    (hk : k ≠ 0)
    (hN : ∀ i : ℕ, i < 7 → a' (N0 + i) = a' N0 + k * i) :
    (∃ i : ℕ, i < 7 ∧ a' (N0 + i) = 0)  := by
  have hp : Fact (Nat.Prime 7) := ⟨by norm_num⟩
  let ii := - (a' N0) / k
  use ii.val
  exact ⟨ZMod.val_lt ii, by rw [hN ii.val (ZMod.val_lt ii), ZMod.natCast_val, ZMod.cast_id', id_def, mul_div_cancel₀ _ hk]; exact add_neg_self (a' N0)⟩",49.16232109069824
compfiles,Compfiles/Imo2005P3.lean,"theorem key_insight (x y z : ℝ) (hx : x > 0) (hy : y > 0) (hz : z > 0) (h : x * y * z ≥ 1) :
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2) ≥ (x ^ 2 - y * z) / (x ^ 2 + y ^ 2 + z ^ 2) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,11,True,,11,0.0,"theorem key_insight (x y z : ℝ) (hx : x > 0) (hy : y > 0) (hz : z > 0) (h : x * y * z ≥ 1) :
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2) ≥ (x ^ 2 - y * z) / (x ^ 2 + y ^ 2 + z ^ 2) := by
  have key :
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2) -
        (x ^ 5 - x ^ 2 * 1) / (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2)) =
      (x ^ 3 - 1) ^ 2 * x ^ 2 * (y ^ 2 + z ^ 2) /
        ((x ^ 5 + y ^ 2 + z ^ 2) * (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2))) := by
    field_simp
    ring
  have h₅ :
    (x ^ 3 - 1) ^ 2 * x ^ 2 * (y ^ 2 + z ^ 2) /
        ((x ^ 5 + y ^ 2 + z ^ 2) * (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2))) ≥ 0 := by positivity
  calc
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2)
      ≥ (x ^ 5 - x ^ 2 * 1) / (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2)) := by linarith only [key, h₅]
    _ ≥ (x ^ 5 - x ^ 2 * (x * y * z)) / (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2)) := by gcongr
    _ = (x ^ 2 - y * z) / (x ^ 2 + y ^ 2 + z ^ 2) := by field_simp; ring","theorem key_insight (x y z : ℝ) (hx : x > 0) (hy : y > 0) (hz : z > 0) (h : x * y * z ≥ 1) :
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2) ≥ (x ^ 2 - y * z) / (x ^ 2 + y ^ 2 + z ^ 2) := by
  have key :
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2) -
        (x ^ 5 - x ^ 2 * 1) / (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2)) =
      (x ^ 3 - 1) ^ 2 * x ^ 2 * (y ^ 2 + z ^ 2) /
        ((x ^ 5 + y ^ 2 + z ^ 2) * (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2))) := by
    field_simp
    ring
  have h₅ :
    (x ^ 3 - 1) ^ 2 * x ^ 2 * (y ^ 2 + z ^ 2) /
        ((x ^ 5 + y ^ 2 + z ^ 2) * (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2))) ≥ 0 := by positivity
  calc
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2)
      ≥ (x ^ 5 - x ^ 2 * 1) / (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2)) := by linarith only [key, h₅]
    _ ≥ (x ^ 5 - x ^ 2 * (x * y * z)) / (x ^ 3 * (x ^ 2 + y ^ 2 + z ^ 2)) := by gcongr
    _ = (x ^ 2 - y * z) / (x ^ 2 + y ^ 2 + z ^ 2) := by field_simp; ring",171.66046524047852
compfiles,Compfiles/Imo2022P2.lean,"lemma amgm (a b : ℝ+) : ⟨2, two_pos⟩ ≤ a / b + b / a ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,11,True,,11,0.0,"lemma amgm (a b : ℝ+) : ⟨2, two_pos⟩ ≤ a / b + b / a := by
  change 2 ≤ a.val/b.val + b.val/a.val
  obtain ⟨a, ha⟩ := a
  obtain ⟨b, hb⟩ := b
  dsimp only
  field_simp
  have h1 : 0 < b * a := Real.mul_pos hb ha
  suffices H : 2 * (b * a) ≤ a * a + b * b by exact (le_div_iff h1).mpr H
  suffices H : 0 ≤ (a - b)^2 by linarith
  exact sq_nonneg (a - b)","lemma amgm (a b : ℝ+) : ⟨2, two_pos⟩ ≤ a / b + b / a := by
  change 2 ≤ a.val/b.val + b.val/a.val
  obtain ⟨a, ha⟩ := a
  obtain ⟨b, hb⟩ := b
  dsimp only
  field_simp
  have h1 : 0 < b * a := Real.mul_pos hb ha
  suffices H : 2 * (b * a) ≤ a * a + b * b by exact (le_div_iff h1).mpr H
  suffices H : 0 ≤ (a - b)^2 by linarith
  exact sq_nonneg (a - b)",54.080575942993164
compfiles,Compfiles/Usa2019P1.lean,"lemma pnat_odd_mul {a b c : ℕ+} (h : a * b = c * c) (hc : Odd c.val) :
    Odd a.val ∧ Odd b.val ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,10,True,,9,-0.1,"lemma pnat_odd_mul {a b c : ℕ+} (h : a * b = c * c) (hc : Odd c.val) :
    Odd a.val ∧ Odd b.val := by
  obtain ⟨a, ha⟩ := a
  obtain ⟨b, hb⟩ := b
  obtain ⟨c, hc⟩ := c
  simp only [PNat.mk_coe]
  rw [PNat.mk_coe] at hc
  apply_fun (fun x ↦ x.val) at h
  dsimp at h
  have h1 : Odd (c * c) := Odd.mul hc hc
  rw [←h] at h1
  exact Nat.odd_mul.mp h1","lemma pnat_odd_mul {a b c : ℕ+} (h : a * b = c * c) (hc : Odd c.val) :
    Odd a.val ∧ Odd b.val  := by
  rcases a with ⟨a, ha⟩; rcases b with ⟨b, hb⟩; rcases c with ⟨c, hc₀⟩
  rw [PNat.mk_coe] at hc; apply_fun (fun x ↦ x.val) at h; dsimp at h
  have h1 : Odd (c * c) := Odd.mul hc hc
  rw [←h] at h1; exact Nat.odd_mul.mp h1",106.11371111869812
compfiles,Compfiles/Poland1998P4.lean,"lemma can_get_a_later_one : (∀ N : ℕ, 7 ∣ a N → (∃ M : ℕ, N < M ∧ 7 ∣ a M)) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,10,True,,5,-0.5,"lemma can_get_a_later_one : (∀ N : ℕ, 7 ∣ a N → (∃ M : ℕ, N < M ∧ 7 ∣ a M)) := by
  intro n hn
  have ha' : a' n = 0 := by
    have : a' n = ⟨a n % 7, Nat.mod_lt _ (Nat.succ_pos _)⟩ := by simp[a']
    rw [this]
    simp only [Nat.mod_eq_zero_of_dvd hn, Fin.mk_zero]
  obtain ⟨m, hmgt, hm7⟩ := can_get_a_later_one_zmod n ha'
  use m
  use hmgt
  exact Fin.natCast_eq_zero.mp hm7","lemma can_get_a_later_one : (∀ N : ℕ, 7 ∣ a N → (∃ M : ℕ, N < M ∧ 7 ∣ a M))  := by
  intro n hn
  have ha' : a' n = 0 := by simp [a', Nat.mod_eq_zero_of_dvd hn]
  obtain ⟨m, hmgt, hm7⟩ := can_get_a_later_one_zmod n ha'
  exact ⟨m, hmgt, Fin.natCast_eq_zero.mp hm7⟩",117.22964715957642
compfiles,Compfiles/Imo1998P2.lean,"theorem A_fibre_over_judgePair {p : JudgePair J} (h : p.Distinct) :
    agreedContestants r p = ((A r).filter fun a : AgreedTriple C J => a.judgePair = p).image
    AgreedTriple.contestant ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,12,True,,3,-0.75,"theorem A_fibre_over_judgePair {p : JudgePair J} (h : p.Distinct) :
    agreedContestants r p = ((A r).filter fun a : AgreedTriple C J => a.judgePair = p).image
    AgreedTriple.contestant := by
  dsimp only [A, agreedContestants]; ext c; constructor <;> intro h
  · rw [Finset.mem_image]; refine ⟨⟨c, p⟩, ?_⟩; aesop
  -- porting note: this used to be `finish`
  · simp only [Finset.mem_filter, Finset.mem_image, Prod.exists] at h
    rcases h with ⟨_, ⟨_, ⟨_, ⟨h, _⟩⟩⟩⟩
    cases h; aesop","theorem A_fibre_over_judgePair {p : JudgePair J} (h : p.Distinct) :
    agreedContestants r p = ((A r).filter fun a : AgreedTriple C J => a.judgePair = p).image
    AgreedTriple.contestant   := by
  dsimp [A, agreedContestants]; ext; aesop (add safe [Finset.mem_univ, Finset.mem_filter, Finset.mem_image, true_and_iff, exists_prop, Prod.exists])",36.295430183410645
compfiles,Compfiles/Imo1998P2.lean,"theorem norm_bound_of_odd_sum {x y z : ℤ} (h : x + y = 2 * z + 1) :
    2 * z * z + 2 * z + 1 ≤ x * x + y * y ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,15,True,,15,0.0,"theorem norm_bound_of_odd_sum {x y z : ℤ} (h : x + y = 2 * z + 1) :
    2 * z * z + 2 * z + 1 ≤ x * x + y * y := by
  suffices 4 * z * z + 4 * z + 1 + 1 ≤ 2 * x * x + 2 * y * y by
    rw [← mul_le_mul_left (zero_lt_two' ℤ)]; ring_nf at this ⊢; exact this
  have h' : (x + y) * (x + y) = 4 * z * z + 4 * z + 1 := by rw [h]; ring
  rw [← add_sq_add_sq_sub, h', add_le_add_iff_left]
  suffices 0 < (x - y) * (x - y) by apply Int.add_one_le_of_lt this
  rw [mul_self_pos, sub_ne_zero]; apply Int.ne_of_odd_add ⟨z, h⟩","theorem norm_bound_of_odd_sum {x y z : ℤ} (h : x + y = 2 * z + 1) :
    2 * z * z + 2 * z + 1 ≤ x * x + y * y := by
  suffices 4 * z * z + 4 * z + 1 + 1 ≤ 2 * x * x + 2 * y * y by
    rw [← mul_le_mul_left (zero_lt_two' ℤ)]; ring_nf at this ⊢; exact this
  have h' : (x + y) * (x + y) = 4 * z * z + 4 * z + 1 := by rw [h]; ring
  rw [← add_sq_add_sq_sub, h', add_le_add_iff_left]
  suffices 0 < (x - y) * (x - y) by apply Int.add_one_le_of_lt this
  rw [mul_self_pos, sub_ne_zero]; apply Int.ne_of_odd_add ⟨z, h⟩",55.37314772605896
compfiles,Compfiles/Imo1998P2.lean,"theorem judge_pairs_card_lower_bound {z : ℕ} (hJ : Fintype.card J = 2 * z + 1) (c : C) :
    2 * z * z + 2 * z + 1 ≤ (Finset.univ.filter fun p : JudgePair J => p.Agree r c).card ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,12,True,,12,0.0,"theorem judge_pairs_card_lower_bound {z : ℕ} (hJ : Fintype.card J = 2 * z + 1) (c : C) :
    2 * z * z + 2 * z + 1 ≤ (Finset.univ.filter fun p : JudgePair J => p.Agree r c).card := by
  let x := (Finset.univ.filter fun j => r c j).card
  let y := (Finset.univ.filter fun j => ¬r c j).card
  have h : (Finset.univ.filter fun p : JudgePair J => p.Agree r c).card = x * x + y * y := by
    simp [x, y, ← Finset.filter_product_card]
  rw [h]; apply Int.le_of_ofNat_le_ofNat; simp only [Int.ofNat_add, Int.ofNat_mul]
  apply norm_bound_of_odd_sum
  suffices x + y = 2 * z + 1 by simp [← Int.ofNat_add, this]
  rw [Finset.filter_card_add_filter_neg_card_eq_card, ← hJ]; rfl","theorem judge_pairs_card_lower_bound {z : ℕ} (hJ : Fintype.card J = 2 * z + 1) (c : C) :
    2 * z * z + 2 * z + 1 ≤ (Finset.univ.filter fun p : JudgePair J => p.Agree r c).card := by
  let x := (Finset.univ.filter fun j => r c j).card
  let y := (Finset.univ.filter fun j => ¬r c j).card
  have h : (Finset.univ.filter fun p : JudgePair J => p.Agree r c).card = x * x + y * y := by
    simp [x, y, ← Finset.filter_product_card]
  rw [h]; apply Int.le_of_ofNat_le_ofNat; simp only [Int.ofNat_add, Int.ofNat_mul]
  apply norm_bound_of_odd_sum
  suffices x + y = 2 * z + 1 by simp [← Int.ofNat_add, this]
  rw [Finset.filter_card_add_filter_neg_card_eq_card, ← hJ]; rfl",68.83499598503113
compfiles,Compfiles/Imo2022P2.lean,"lemma lemma0 {α : Type} {p : α → α → Prop}
    (h1 : ∀ x, ∃! y, p x y) (h2 : ∀ x y, p x y ↔ p y x) :
    ∀ x, Classical.choose (h1 (Classical.choose (h1 x).exists)).exists = x ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,12,True,,6,-0.5,"lemma lemma0 {α : Type} {p : α → α → Prop}
    (h1 : ∀ x, ∃! y, p x y) (h2 : ∀ x y, p x y ↔ p y x) :
    ∀ x, Classical.choose (h1 (Classical.choose (h1 x).exists)).exists = x := by
  intro x
  obtain ⟨y, h1e, h1u⟩ := h1 x
  have h2' : Classical.choose (h1 x).exists = y :=
    h1u _ (Classical.choose_spec (h1 x).exists)
  rw [h2']

  obtain ⟨w, h1e', h1u'⟩ := h1 y
  have h4 := Classical.choose_spec (h1 y).exists
  have hxw : x = w := by
    apply h1u'
    rw [h2]
    exact h1e
  rw [hxw]
  exact h1u' _ h4"," theorem lemma0 {α : Type} {p : α → α → Prop}
    (h1 : ∀ x, ∃! y, p x y) (h2 : ∀ x y, p x y ↔ p y x) :
    ∀ x, Classical.choose (h1 (Classical.choose (h1 x).exists)).exists = x   := by
  intro x
  have ⟨y, h1e, h1u⟩ := h1 x
  have h2' : Classical.choose (h1 x).exists = y := h1u _ (Classical.choose_spec (h1 x).exists)
  rw [h2']
  have ⟨w, h1e', h1u'⟩ := h1 y
  exact (h1u' _ ((h2 _ _).1 h1e)).symm ▸ h1u' _ (Classical.choose_spec (h1 y).exists)",43.2844979763031
compfiles,Compfiles/Imo2001P2.lean,"theorem bound (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) :
    a ^ 4 / (a ^ 4 + b ^ 4 + c ^ 4) ≤ a ^ 3 / sqrt ((a ^ 3) ^ 2 + 8 * b ^ 3 * c ^ 3) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,13,True,,4,-0.6923076923076923,"theorem bound (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) :
    a ^ 4 / (a ^ 4 + b ^ 4 + c ^ 4) ≤ a ^ 3 / sqrt ((a ^ 3) ^ 2 + 8 * b ^ 3 * c ^ 3) := by
  rw [div_le_div_iff (by positivity) (by positivity)]
  calc a ^ 4 * sqrt ((a ^ 3) ^ 2 + (8:ℝ) * b ^ 3 * c ^ 3)
      = a ^ 3 * (a * sqrt ((a ^ 3) ^ 2 + (8:ℝ) * b ^ 3 * c ^ 3)) := by ring
    _ ≤ a ^ 3 * (a ^ 4 + b ^ 4 + c ^ 4) := ?_
  gcongr
  apply le_of_pow_le_pow_left two_ne_zero (by positivity)
  rw [mul_pow, sq_sqrt (by positivity), ← sub_nonneg]
  calc
    (a ^ 4 + b ^ 4 + c ^ 4) ^ 2 - a ^ 2 * ((a ^ 3) ^ 2 + 8 * b ^ 3 * c ^ 3)
      = 2 * (a ^ 2 * (b ^ 2 - c ^ 2)) ^ 2 + (b ^ 4 - c ^ 4) ^ 2 +
        (2 * (a ^ 2 * b * c - b ^ 2 * c ^ 2)) ^ 2 := by ring
    _ ≥ 0 := by positivity","theorem bound (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) :
    a ^ 4 / (a ^ 4 + b ^ 4 + c ^ 4) ≤ a ^ 3 / sqrt ((a ^ 3) ^ 2 + 8 * b ^ 3 * c ^ 3)  := by
  rw [div_le_div_iff (by positivity) (by positivity)]
  calc a ^ 4 * sqrt ((a ^ 3) ^ 2 + 8 * b ^ 3 * c ^ 3)
  = a ^ 3 * (a * sqrt ((a ^ 3) ^ 2 + 8 * b ^ 3 * c ^ 3)) := by ring
  gcongr",50.56602168083191
compfiles,Compfiles/Usa2011P4.lean,"problem usa2011_p4 :
    match solution_data with
    | .AlwaysTrue => ∀ n, 2 ≤ n → P n
    | .Counterexample m => 2 ≤ m ∧ ¬ P m ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,14,True,,11,-0.21428571428571427,"problem usa2011_p4 :
    match solution_data with
    | .AlwaysTrue => ∀ n, 2 ≤ n → P n
    | .Counterexample m => 2 ≤ m ∧ ¬ P m := by
  -- See https://web.evanchen.cc/exams/USAMO-2011-notes.pdf for an informal proof.
  dsimp
  refine ⟨by norm_num, ?_⟩
  rw [not_exists]
  intro x hx
  rw [show 4 = 2^2 by rfl, ←Nat.pow_mul] at hx

  -- 2^(2^25) is small enough that we can just normalize it.
  rw [show 2 ^ 2 ^ 25 % (2 ^ 25 - 1) = 2 ^ 7 by rfl] at hx

  have h2 : 2 ≤ 2 := by norm_num
  have h3 := Nat.pow_right_injective h2 hx
  apply_fun (· % 2) at h3
  norm_num at h3","problem usa2011_p4 :
    match solution_data with
    | .AlwaysTrue => ∀ n, 2 ≤ n → P n
    | .Counterexample m => 2 ≤ m ∧ ¬ P m  := by
  dsimp
  constructor; norm_num
  rw [not_exists]
  intro x hx
  rw [show 4 = 2^2 by rfl, ←Nat.pow_mul, show 2 ^ 2 ^ 25 % (2 ^ 25 - 1) = 2 ^ 7 by rfl] at hx
  have := Nat.pow_right_injective (le_refl 2) hx
  apply_fun (· % 2) at this
  norm_num at this",54.71238088607788
compfiles,Compfiles/Imo2009P5.lean,"problem imo2009_p5 (f : ℕ+ → ℕ+) :
    f ∈ solution_set ↔
    ∀ a b, (f (b + f a - 1) < f b + a ∧
            a < f b + f (b + f a - 1) ∧
            f b < f (b + f a - 1) + a) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,15,True,,4,-0.7333333333333333,"problem imo2009_p5 (f : ℕ+ → ℕ+) :
    f ∈ solution_set ↔
    ∀ a b, (f (b + f a - 1) < f b + a ∧
            a < f b + f (b + f a - 1) ∧
            f b < f (b + f a - 1) + a) := by
  have fsn := final_solution_pnat f
  constructor
  · rintro rfl a b
    obtain ⟨h1, h2, h3⟩ := fsn.mpr rfl
    exact ⟨h1 a b, h2 a b, h3 a b⟩
  · intro h
    rw [Set.mem_singleton_iff]
    apply fsn.mp
    refine ⟨?_,?_,?_⟩
    · intro a b; exact (h a b).1
    · intro a b; exact (h a b).2.1
    · intro a b; exact (h a b).2.2"," theorem imo2009_p5 (f : ℕ+ → ℕ+) :
    f ∈ solution_set ↔
    ∀ a b, (f (b + f a - 1) < f b + a ∧
            a < f b + f (b + f a - 1) ∧
            f b < f (b + f a - 1) + a)   := by
  have fsn := final_solution_pnat f
  constructor
  · exact λ rfl a b => ⟨(fsn.mpr rfl).1 a b, (fsn.mpr rfl).2.1 a b, (fsn.mpr rfl).2.2 a b⟩
  · exact λ h => fsn.mp ⟨λ a b => (h a b).1, λ a b => (h a b).2.1, λ a b => (h a b).2.2⟩",63.9759259223938
compfiles,Compfiles/Imo2013P5.lean,"lemma fixed_point_of_gt_1 {f : ℚ → ℝ} {x : ℚ} (hx : 1 < x)
    (H1 : ∀ x y, 0 < x → 0 < y → f (x * y) ≤ f x * f y)
    (H2 : ∀ x y, 0 < x → 0 < y → f x + f y ≤ f (x + y))
    (H4 : ∀ n : ℕ, 0 < n → (n : ℝ) ≤ f n)
    (H5 : ∀ x : ℚ, 1 < x → (x : ℝ) ≤ f x)
    {a : ℚ} (ha1 : 1 < a) (hae : f a = a) :
    f x = x ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,18,True,,18,0.0,"lemma fixed_point_of_gt_1 {f : ℚ → ℝ} {x : ℚ} (hx : 1 < x)
    (H1 : ∀ x y, 0 < x → 0 < y → f (x * y) ≤ f x * f y)
    (H2 : ∀ x y, 0 < x → 0 < y → f x + f y ≤ f (x + y))
    (H4 : ∀ n : ℕ, 0 < n → (n : ℝ) ≤ f n)
    (H5 : ∀ x : ℚ, 1 < x → (x : ℝ) ≤ f x)
    {a : ℚ} (ha1 : 1 < a) (hae : f a = a) :
    f x = x := by
  -- Choose n such that 1 + x < a^n.
  obtain ⟨N, hN⟩ := pow_unbounded_of_one_lt (1 + x) ha1
  have h_big_enough : (1:ℚ) < a^N - x := lt_sub_iff_add_lt.mpr hN
  have h1 := calc (x : ℝ) + ((a^N - x) : ℚ)
                ≤ f x + ((a^N - x) : ℚ) := add_le_add_right (H5 x hx) _
              _ ≤ f x + f (a^N - x)     := add_le_add_left (H5 _ h_big_enough) _
  have hxp : 0 < x := zero_lt_one.trans hx
  have hNp : 0 < N := by
    by_contra H; push_neg at H; rw [le_zero_iff.mp H] at hN; linarith

  have h2 := calc f x + f (a^N - x)
                ≤ f (x + (a^N - x)) := H2 x (a^N - x) hxp (zero_lt_one.trans h_big_enough)
              _ = f (a^N)           := by ring_nf
              _ = (a^N : ℝ)         := fixed_point_of_pos_nat_pow hNp H1 H4 H5 ha1 hae
              _ = (x:ℝ) + ((a^N:ℝ) - (x:ℝ))     := by ring

  have heq := h1.antisymm (by exact_mod_cast h2)
  linarith [H5 x hx, H5 _ h_big_enough]","lemma fixed_point_of_gt_1 {f : ℚ → ℝ} {x : ℚ} (hx : 1 < x)
    (H1 : ∀ x y, 0 < x → 0 < y → f (x * y) ≤ f x * f y)
    (H2 : ∀ x y, 0 < x → 0 < y → f x + f y ≤ f (x + y))
    (H4 : ∀ n : ℕ, 0 < n → (n : ℝ) ≤ f n)
    (H5 : ∀ x : ℚ, 1 < x → (x : ℝ) ≤ f x)
    {a : ℚ} (ha1 : 1 < a) (hae : f a = a) :
    f x = x := by
  -- Choose n such that 1 + x < a^n.
  obtain ⟨N, hN⟩ := pow_unbounded_of_one_lt (1 + x) ha1
  have h_big_enough : (1:ℚ) < a^N - x := lt_sub_iff_add_lt.mpr hN
  have h1 := calc (x : ℝ) + ((a^N - x) : ℚ)
                ≤ f x + ((a^N - x) : ℚ) := add_le_add_right (H5 x hx) _
              _ ≤ f x + f (a^N - x)     := add_le_add_left (H5 _ h_big_enough) _
  have hxp : 0 < x := zero_lt_one.trans hx
  have hNp : 0 < N := by
    by_contra H; push_neg at H; rw [le_zero_iff.mp H] at hN; linarith

  have h2 := calc f x + f (a^N - x)
                ≤ f (x + (a^N - x)) := H2 x (a^N - x) hxp (zero_lt_one.trans h_big_enough)
              _ = f (a^N)           := by ring_nf
              _ = (a^N : ℝ)         := fixed_point_of_pos_nat_pow hNp H1 H4 H5 ha1 hae
              _ = (x:ℝ) + ((a^N:ℝ) - (x:ℝ))     := by ring

  have heq := h1.antisymm (by exact_mod_cast h2)
  linarith [H5 x hx, H5 _ h_big_enough]",104.6857898235321
compfiles,Compfiles/Poland1998P4.lean,"lemma strengthen
    {P : ℕ → Prop}
    (h : ∀ N : ℕ, P N → (∃ M : ℕ, N < M ∧ P M))
    (he : ∃ N : ℕ, P N) :
    (∀ N : ℕ, ∃ M : ℕ, N < M ∧ P M) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,14,True,,12,-0.14285714285714285,"lemma strengthen
    {P : ℕ → Prop}
    (h : ∀ N : ℕ, P N → (∃ M : ℕ, N < M ∧ P M))
    (he : ∃ N : ℕ, P N) :
    (∀ N : ℕ, ∃ M : ℕ, N < M ∧ P M) := by
  obtain ⟨N0, hn0⟩ := he
  intro N
  induction' N with pn hpn
  · obtain (hlt : 0 < N0) | (hlte : N0 ≤ 0) := lt_or_ge 0 N0
    · exact ⟨N0, hlt, hn0⟩
    · have heq : N0 = 0 := eq_bot_iff.mpr hlte
      rw [heq] at hn0
      exact h 0 hn0
  . obtain ⟨m, hm, hmp⟩ := hpn
    obtain (hlt : pn + 1 < m) |  (hlte : m ≤ pn + 1) := lt_or_ge (pn + 1) m
    · exact ⟨m, hlt, hmp⟩
    · have heq : m = pn + 1 := le_antisymm hlte hm
      rw [heq] at hmp
      exact h (pn.succ) hmp","lemma strengthen
    {P : ℕ → Prop}
    (h : ∀ N : ℕ, P N → (∃ M : ℕ, N < M ∧ P M))
    (he : ∃ N : ℕ, P N) :
    (∀ N : ℕ, ∃ M : ℕ, N < M ∧ P M)  := by
  obtain ⟨N0, hn0⟩ := he
  intro N
  induction' N with pn hpn
  · obtain hlt | hlte := lt_or_ge 0 N0
    · exact ⟨N0, hlt, hn0⟩
    · rw [eq_bot_iff.mpr hlte] at hn0
      exact h 0 hn0
  · obtain ⟨m, hm, hmp⟩ := hpn
    obtain hlt | hlte := lt_or_ge (pn + 1) m
    · exact ⟨m, hlt, hmp⟩
    · rw [le_antisymm hlte hm] at hmp
      exact h (pn.succ) hmp",157.4806399345398
compfiles,Compfiles/Imo2021P1.lean,"theorem exists_numbers_in_interval (n : ℕ) (hn : 100 ≤ n) :
    ∃ l : ℕ, n + 4 * l ≤ 2 * l ^ 2 ∧ 2 * l ^ 2 + 4 * l ≤ 2 * n ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,15,True,,15,0.0,"theorem exists_numbers_in_interval (n : ℕ) (hn : 100 ≤ n) :
    ∃ l : ℕ, n + 4 * l ≤ 2 * l ^ 2 ∧ 2 * l ^ 2 + 4 * l ≤ 2 * n := by
  have hn' : 1 ≤ Nat.sqrt (n + 1) := by
    rw [Nat.le_sqrt]
    omega
  have h₁ := Nat.sqrt_le' (n + 1)
  have h₂ := Nat.succ_le_succ_sqrt' (n + 1)
  have h₃ : 10 ≤ (n + 1).sqrt := by
    rw [Nat.le_sqrt]
    omega
  rw [← Nat.sub_add_cancel hn'] at h₁ h₂ h₃
  set l := (n + 1).sqrt - 1
  refine ⟨l, ?_, ?_⟩
  · calc n + 4 * l ≤ (l ^ 2 + 4 * l + 2) + 4 * l := by linarith only [h₂]
      _ ≤ 2 * l ^ 2 := by nlinarith only [h₃]
  · linarith only [h₁]","theorem exists_numbers_in_interval (n : ℕ) (hn : 100 ≤ n) :
    ∃ l : ℕ, n + 4 * l ≤ 2 * l ^ 2 ∧ 2 * l ^ 2 + 4 * l ≤ 2 * n := by
  have hn' : 1 ≤ Nat.sqrt (n + 1) := by
    rw [Nat.le_sqrt]
    omega
  have h₁ := Nat.sqrt_le' (n + 1)
  have h₂ := Nat.succ_le_succ_sqrt' (n + 1)
  have h₃ : 10 ≤ (n + 1).sqrt := by
    rw [Nat.le_sqrt]
    omega
  rw [← Nat.sub_add_cancel hn'] at h₁ h₂ h₃
  set l := (n + 1).sqrt - 1
  refine ⟨l, ?_, ?_⟩
  · calc n + 4 * l ≤ (l ^ 2 + 4 * l + 2) + 4 * l := by linarith only [h₂]
      _ ≤ 2 * l ^ 2 := by nlinarith only [h₃]
  · linarith only [h₁]",419.2153551578522
compfiles,Compfiles/Usa2001P3.lean,"lemma usa2001_p3_lemma (a b c : ℝ) (ha : 0 ≤ a) (_hb : 0 ≤ b) (_hc : 0 ≤ c)
    (h : a^2 + b^2 + c^2 + a * b * c = 4)
    (hbc : (b - 1) * (c - 1) ≥ 0) :
    a * b + b * c + c * a - a * b * c ≤ 2 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,17,True,,1,-0.9411764705882353,"lemma usa2001_p3_lemma (a b c : ℝ) (ha : 0 ≤ a) (_hb : 0 ≤ b) (_hc : 0 ≤ c)
    (h : a^2 + b^2 + c^2 + a * b * c = 4)
    (hbc : (b - 1) * (c - 1) ≥ 0) :
    a * b + b * c + c * a - a * b * c ≤ 2 := by
  have eq1 := calc
    (2 + a) * (2 - a) = 4 - a ^ 2 := by ring_nf
    _ = a ^ 2 + b ^ 2 + c ^ 2 + a * b * c - a ^ 2 := by rw [h]
    _ = (b ^ 2 + c ^ 2) + a * b * c := by ring_nf
    _ ≥ 2 * b * c + a * b * c := by rel [two_mul_le_add_sq b c]
    _ = (2 + a) * (b * c) := by ring_nf
  have a2gt0 : 2 + a > 0 := by linarith
  have bc := (mul_le_mul_left a2gt0).mp eq1
  calc
    a * b + b * c + c * a - a * b * c = a * b + b * c + a * c * (1 - b) := by ring_nf
    _ ≤ a * b + (2 - a) + a * c * (1 - b) := by gcongr
    _ = 2 - a * ((b - 1) * (c - 1)) := by ring_nf
    _ ≤ 2 - 0 := by gcongr; positivity
    _ = 2 := by norm_num","lemma usa2001_p3_lemma (a b c : ℝ) (ha : 0 ≤ a) (_hb : 0 ≤ b) (_hc : 0 ≤ c)
    (h : a^2 + b^2 + c^2 + a * b * c = 4)
    (hbc : (b - 1) * (c - 1) ≥ 0) :
    a * b + b * c + c * a - a * b * c ≤ 2  := by
  calc
  a * b + b * c + c * a - a * b * c = a * b + b * c + a * c * (1 - b) := by ring_nf
  _ ≤ a * b + (2 - a) + a * c * (1 - b) := by gcongr; apply mul_le_mul_of_nonneg_left _ ha
    exact sub_nonneg_of_le bc",509.228187084198
compfiles,Compfiles/Imo1998P2.lean,"problem imo1998_p2 [Fintype J] [Fintype C] (a b k : ℕ) (hC : Fintype.card C = a)
    (hJ : Fintype.card J = b) (ha : 0 < a) (hb : Odd b)
    (hk : ∀ p : JudgePair J, p.Distinct → (agreedContestants r p).card ≤ k) :
    (b - 1 : ℚ) / (2 * b) ≤ k / a ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,16,True,,1,-0.9375,"problem imo1998_p2 [Fintype J] [Fintype C] (a b k : ℕ) (hC : Fintype.card C = a)
    (hJ : Fintype.card J = b) (ha : 0 < a) (hb : Odd b)
    (hk : ∀ p : JudgePair J, p.Distinct → (agreedContestants r p).card ≤ k) :
    (b - 1 : ℚ) / (2 * b) ≤ k / a := by
  rw [clear_denominators ha hb.pos]
  obtain ⟨z, hz⟩ := hb; rw [hz] at hJ; rw [hz]
  have h := le_trans (A_card_lower_bound r hJ) (A_card_upper_bound r hk)
  rw [hC, hJ] at h
  -- We are now essentially done; we just need to bash `h` into exactly the right shape.
  have hl : k * ((2 * z + 1) * (2 * z + 1) - (2 * z + 1)) = k * (2 * (2 * z + 1)) * z := by
    simp only [mul_comm, add_mul, one_mul, nonpos_iff_eq_zero, add_tsub_cancel_right]; ring
  have hr : 2 * z * z * a = 2 * z * a * z := by ring
  rw [hl, hr] at h
  cases' z with z
  · simp
  · exact le_of_mul_le_mul_right h z.succ_pos"," theorem imo1998_p2 [Fintype J] [Fintype C] (a b k : ℕ) (hC : Fintype.card C = a)
    (hJ : Fintype.card J = b) (ha : 0 < a) (hb : Odd b)
    (hk : ∀ p : JudgePair J, p.Distinct → (agreedContestants r p).card ≤ k) :
    (b - 1 : ℚ) / (2 * b) ≤ k / a   := by
  rw [clear_denominators ha hb.pos, (hb.exists_eq' hJ).some_spec]
  suffices : 2 * (hb.exists_eq'.some ℕ).val.succ / 2 * a ≤ k * 2 * b",501.31277990341187
compfiles,Compfiles/Imo2001P6.lean,"problem imo2001_p6 {a b c d : ℤ} (hd : 0 < d) (hdc : d < c) (hcb : c < b) (hba : b < a)
    (h : a * c + b * d = (a + b - c + d) * (-a + b + c + d)) : ¬Prime (a * b + c * d) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,19,True,,9,-0.5263157894736842,"problem imo2001_p6 {a b c d : ℤ} (hd : 0 < d) (hdc : d < c) (hcb : c < b) (hba : b < a)
    (h : a * c + b * d = (a + b - c + d) * (-a + b + c + d)) : ¬Prime (a * b + c * d) := by
  intro (h0 : Prime (a * b + c * d))
  have ha : 0 < a := by omega
  have hb : 0 < b := by omega
  have hc : 0 < c := by omega
  -- the key step is to show that `a*c + b*d` divides the product `(a*b + c*d) * (a*d + b*c)`
  have dvd_mul : a * c + b * d ∣ (a * b + c * d) * (a * d + b * c) := by
    use b ^ 2 + b * d + d ^ 2
    linear_combination b * d * h
  -- since `a*b + c*d` is prime (by assumption), it must divide `a*c + b*d` or `a*d + b*c`
  obtain (h1 : a * b + c * d ∣ a * c + b * d) | (h2 : a * c + b * d ∣ a * d + b * c) :=
    h0.left_dvd_or_dvd_right_of_dvd_mul dvd_mul
  -- in both cases, we derive a contradiction
  · have aux : 0 < a * c + b * d := by nlinarith only [ha, hb, hc, hd]
    have : a * b + c * d ≤ a * c + b * d := Int.le_of_dvd aux h1
    nlinarith only [hba, hcb, hdc, h, this]
  · have aux : 0 < a * d + b * c := by nlinarith only [ha, hb, hc, hd]
    have : a * c + b * d ≤ a * d + b * c := Int.le_of_dvd aux h2
    nlinarith only [hba, hdc, h, this]","problem imo2001_p6 {a b c d : ℤ} (hd : 0 < d) (hdc : d < c) (hcb : c < b) (hba : b < a)
    (h : a * c + b * d = (a + b - c + d) * (-a + b + c + d)) : ¬Prime (a * b + c * d)  := by
  intro (h0 : Prime (a * b + c * d))
  have dvd_mul : a * c + b * d ∣ (a * b + c * d) * (a * d + b * c) := by
    use b ^ 2 + b * d + d ^ 2
    linear_combination b * d * h
  obtain (h1 : a * b + c * d ∣ a * c + b * d) | (h2 : a * c + b * d ∣ a * d + b * c) :=
    h0.left_dvd_or_dvd_right_of_dvd_mul dvd_mul
  · nlinarith only [Int.le_of_dvd (by nlinarith) h1, hba, hcb, hdc, h]
  · nlinarith only [Int.le_of_dvd (by nlinarith) h2, hba, hcb, hdc, h]",61.22497892379761
compfiles,Compfiles/Imo2005P3.lean,"problem imo2005_p3 (x y z : ℝ) (hx : x > 0) (hy : y > 0) (hz : z > 0) (h : x * y * z ≥ 1) :
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2) + (y ^ 5 - y ^ 2) / (y ^ 5 + z ^ 2 + x ^ 2) +
        (z ^ 5 - z ^ 2) / (z ^ 5 + x ^ 2 + y ^ 2) ≥
      0 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,19,True,,1,-0.9473684210526315,"problem imo2005_p3 (x y z : ℝ) (hx : x > 0) (hy : y > 0) (hz : z > 0) (h : x * y * z ≥ 1) :
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2) + (y ^ 5 - y ^ 2) / (y ^ 5 + z ^ 2 + x ^ 2) +
        (z ^ 5 - z ^ 2) / (z ^ 5 + x ^ 2 + y ^ 2) ≥
      0 := by
  calc
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2) + (y ^ 5 - y ^ 2) / (y ^ 5 + z ^ 2 + x ^ 2) +
          (z ^ 5 - z ^ 2) / (z ^ 5 + x ^ 2 + y ^ 2) ≥
        (x ^ 2 - y * z) / (x ^ 2 + y ^ 2 + z ^ 2) + (y ^ 2 - z * x) / (y ^ 2 + z ^ 2 + x ^ 2) +
          (z ^ 2 - x * y) / (z ^ 2 + x ^ 2 + y ^ 2) := by
      gcongr ?_ + ?_ + ?_ <;> apply key_insight <;> linarith
    _ = 1 / 2 * ((x - y) ^ 2 + (y - z) ^ 2 + (z - x) ^ 2) / (x ^ 2 + y ^ 2 + z ^ 2) := by ring
    _ ≥ 0 := by positivity","problem imo2005_p3 (x y z : ℝ) (hx : x > 0) (hy : y > 0) (hz : z > 0) (h : x * y * z ≥ 1) :
    (x ^ 5 - x ^ 2) / (x ^ 5 + y ^ 2 + z ^ 2) + (y ^ 5 - y ^ 2) / (y ^ 5 + z ^ 2 + x ^ 2) +
        (z ^ 5 - z ^ 2) / (z ^ 5 + x ^ 2 + y ^ 2) ≥
      0  := by
  gcongr ?_ + ?_ + ?_ <;> apply key_insight <;> linarith
  calc _ = 1 / 2 * ((x - y) ^ 2 + (y - z) ^ 2 + (z - x) ^ 2) / (x ^ 2 + y ^ 2 + z ^ 2) := by ring
  linarith",62.0519380569458
compfiles,Compfiles/Imo2021P1.lean,"problem imo2021_p1 :
    ∀ n : ℕ, 100 ≤ n → ∀ (A) (_ : A ⊆ Finset.Icc n (2 * n)),
    (∃ (a : _) (_ : a ∈ A) (b : _) (_ : b ∈ A), a ≠ b ∧ ∃ k : ℕ, a + b = k ^ 2) ∨
    ∃ (a : _) (_ : a ∈ Finset.Icc n (2 * n) \ A) (b : _) (_ : b ∈ Finset.Icc n (2 * n) \ A),
      a ≠ b ∧ ∃ k : ℕ, a + b = k ^ 2 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,20,True,,4,-0.8,"problem imo2021_p1 :
    ∀ n : ℕ, 100 ≤ n → ∀ (A) (_ : A ⊆ Finset.Icc n (2 * n)),
    (∃ (a : _) (_ : a ∈ A) (b : _) (_ : b ∈ A), a ≠ b ∧ ∃ k : ℕ, a + b = k ^ 2) ∨
    ∃ (a : _) (_ : a ∈ Finset.Icc n (2 * n) \ A) (b : _) (_ : b ∈ Finset.Icc n (2 * n) \ A),
      a ≠ b ∧ ∃ k : ℕ, a + b = k ^ 2 := by
  intro n hn A hA
  -- For each n ∈ ℕ such that 100 ≤ n, there exists a pairwise unequal triplet {a, b, c} ⊆ [n, 2n]
  -- such that all pairwise sums are perfect squares. In practice, it will be easier to use
  -- a finite set B ⊆ [n, 2n] such that all pairwise unequal pairs of B sum to a perfect square
  -- noting that B has cardinality greater or equal to 3, by the explicit construction of the
  -- triplet {a, b, c} before.
  obtain ⟨B, hB, h₁, h₂⟩ := exists_finset_3_le_card_with_pairs_summing_to_squares n hn
  have hBsub : B ⊆ Finset.Icc n (2 * n) := by
    intro c hcB; simpa only [Finset.mem_Icc] using h₂ c hcB
  have hB' : 2 * 1 < (B ∩ (Finset.Icc n (2 * n) \ A) ∪ B ∩ A).card := by
    rw [←inter_union_distrib_left, sdiff_union_self_eq_union, union_eq_left.2 hA,
      inter_eq_left.2 hBsub]
    exact Nat.succ_le_iff.mp hB
  -- Since B has cardinality greater or equal to 3, there must exist a subset C ⊆ B such that
  -- for any A ⊆ [n, 2n], either C ⊆ A or C ⊆ [n, 2n] \ A and C has cardinality greater
  -- or equal to 2.
  obtain ⟨C, hC, hCA⟩ := Finset.exists_subset_or_subset_of_two_mul_lt_card hB'
  rw [Finset.one_lt_card] at hC
  rcases hC with ⟨a, ha, b, hb, hab⟩
  simp only [Finset.subset_iff, Finset.mem_inter] at hCA
  -- Now we split into the two cases C ⊆ [n, 2n] \ A and C ⊆ A, which can be dealt with identically.
  cases' hCA with hCA hCA <;> [right; left] <;>
    exact ⟨a, (hCA ha).2, b, (hCA hb).2, hab, h₁ a (hCA ha).1 b (hCA hb).1 hab⟩"," theorem imo2021_p1 :
    ∀ n : ℕ, 100 ≤ n → ∀ (A) (_ : A ⊆ Finset.Icc n (2 * n)),
    (∃ (a : _) (_ : a ∈ A) (b : _) (_ : b ∈ A), a ≠ b ∧ ∃ k : ℕ, a + b = k ^ 2) ∨
    ∃ (a : _) (_ : a ∈ Finset.Icc n (2 * n) \ A) (b : _) (_ : b ∈ Finset.Icc n (2 * n) \ A),
      a ≠ b ∧ ∃ k : ℕ, a + b = k ^ 2   := by
  intro n hn A hA
  obtain ⟨B, hB, h₁, h₂⟩ := exists_finset_3_le_card_with_pairs_summing_to_squares n hn
  have hB' : 2 < (B ∩ (Finset.Icc n (2 * n) \ A) ∪ B ∩ A).card :=
    rw [←inter_union_distrib_left, sdiff_union_self_eq_union, union_eq_left.2 hA, inter_eq_left.2 (h₂ ▸ id)]
    exact Nat.succ_le_iff.mp hB
  obtain ⟨C, hC, hCA⟩ := Finset.exists_subset_or_subset_of_two_mul_lt_card hB'
  rcases Finset.one_lt_card.1 hC with ⟨a, ha, b, hb, hab⟩
  simp only [Finset.subset_iff, Finset.mem_inter] at hCA
  cases hCA <;> [right, left] <;> exact ⟨a, (hCA ha).2, b, (hCA hb).2, hab, h₁ a (hCA ha).1 b (hCA hb).1 hab⟩",110.92036080360413
compfiles,Compfiles/Usa2019P1.lean,"lemma f_injective
    (f : ℕ+ → ℕ+)
    (hf : ∀ n, f^[f n] n * f (f n) = n ^ 2) :
    f.Injective ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,23,True,,23,0.0,"lemma f_injective
    (f : ℕ+ → ℕ+)
    (hf : ∀ n, f^[f n] n * f (f n) = n ^ 2) :
    f.Injective := by
  intro p q hpq
  -- If f(p)=f(q), then f^2(p)=f^2(q) and f^{f(p)}(p) = f^{f(q)}(q)
  have h1 : f^[2] p = f^[2] q := by
    apply_fun f at hpq
    exact hpq

  have h2 : ∀ n : ℕ+, f^[n] p = f^[n] q := by
    intro n
    obtain ⟨n, hn⟩ := n
    cases' n with n <;> aesop

  have h3 : f^[f p] p = f^[f q] q := by rw[hpq]; exact h2 (f q)

  -- ⇒ p^2 = f^2(p) ⬝ f^{f(p)}(p) = f^2(q) ⬝ f^{f(q)}(q) = q^2
  have h4 :=
    calc p^2
      = f^[f p] p * f^[2] p := (hf p).symm
    _ = f^[f q] q * f^[2] q := by rw[h3, h1]
    _ = q^2 := hf q

  -- ⇒ p = q
  obtain ⟨p, hp⟩ := p
  obtain ⟨q, hq⟩ := q
  congr
  apply_fun (fun x ↦ x.val) at h4
  rw [PNat.pow_coe, PNat.pow_coe, PNat.mk_coe, PNat.mk_coe] at h4
  rw [pow_left_inj (le_of_lt hp) (le_of_lt hq) two_ne_zero] at h4
  exact h4","lemma f_injective
    (f : ℕ+ → ℕ+)
    (hf : ∀ n, f^[f n] n * f (f n) = n ^ 2) :
    f.Injective := by
  intro p q hpq
  -- If f(p)=f(q), then f^2(p)=f^2(q) and f^{f(p)}(p) = f^{f(q)}(q)
  have h1 : f^[2] p = f^[2] q := by
    apply_fun f at hpq
    exact hpq

  have h2 : ∀ n : ℕ+, f^[n] p = f^[n] q := by
    intro n
    obtain ⟨n, hn⟩ := n
    cases' n with n <;> aesop

  have h3 : f^[f p] p = f^[f q] q := by rw[hpq]; exact h2 (f q)

  -- ⇒ p^2 = f^2(p) ⬝ f^{f(p)}(p) = f^2(q) ⬝ f^{f(q)}(q) = q^2
  have h4 :=
    calc p^2
      = f^[f p] p * f^[2] p := (hf p).symm
    _ = f^[f q] q * f^[2] q := by rw[h3, h1]
    _ = q^2 := hf q

  -- ⇒ p = q
  obtain ⟨p, hp⟩ := p
  obtain ⟨q, hq⟩ := q
  congr
  apply_fun (fun x ↦ x.val) at h4
  rw [PNat.pow_coe, PNat.pow_coe, PNat.mk_coe, PNat.mk_coe] at h4
  rw [pow_left_inj (le_of_lt hp) (le_of_lt hq) two_ne_zero] at h4
  exact h4",45.630898237228394
compfiles,Compfiles/Imo2000P2.lean,"lemma schur (a b c : ℝ) (ha : 0 ≤ a) (hb : 0 ≤ b) (hc : 0 ≤ c) :
    a^2 * b + a^2 * c + b^2 * a + b^2 * c + c^2 * a + c^2 * b ≤
    a^3 + b^3 + c^3 + 3 * a * b * c ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,22,True,,2,-0.9090909090909091,"lemma schur (a b c : ℝ) (ha : 0 ≤ a) (hb : 0 ≤ b) (hc : 0 ≤ c) :
    a^2 * b + a^2 * c + b^2 * a + b^2 * c + c^2 * a + c^2 * b ≤
    a^3 + b^3 + c^3 + 3 * a * b * c := by
  wlog Hcb : c ≤ b with h1
  · have h3 : b ≤ c := le_of_not_le Hcb
    linarith [h1 a c b ha hc hb h3]
  wlog Hba : b ≤ a with h2
  · have h4 : a ≤ b := le_of_not_le Hba
    obtain hca | hac : c ≤ a ∨ a ≤ c := le_total c a
    · have := h2 b a c hb ha hc hca h4
      linarith only [this]
    · have := h2 b c a hb hc ha hac Hcb
      linarith only [this]
  have h5 : a * (a - b) * (a - c) + b * (b - a) * (b - c) =
            (a - b) * (a * (a - c) - b * (b - c)) := by ring

  have h6 : 0 ≤ (a - b) * (a * (a - c) - b * (b - c)) := by
    apply mul_nonneg
    · exact sub_nonneg_of_le Hba
    · nlinarith

  rw [← h5] at h6
  have h12 : 0 ≤ (c - a) * (c - b) := by nlinarith only [Hba, Hcb]
  have h13 : 0 ≤ c * (c - a) * (c - b) := by nlinarith only [hc, h12]
  linarith"," theorem schur (a b c : ℝ) (ha : 0 ≤ a) (hb : 0 ≤ b) (hc : 0 ≤ c) :
    a^2 * b + a^2 * c + b^2 * a + b^2 * c + c^2 * a + c^2 * b ≤
    a^3 + b^3 + c^3 + 3 * a * b * c   := by
  wlog Hcb : c ≤ b;
  linarith [Hcb, a, c, b, ha, hc, hb];
  wlog Hba : b ≤ a;
  linarith [Hba, b, a, c, hb, ha, hc, or.elim (le_total c a) id (λ h, le_of_not_le (mt (le_trans Hcb) Hba h))]",48.69011092185974
compfiles,Compfiles/Imo1998P2.lean,"theorem distinct_judge_pairs_card_lower_bound {z : ℕ} (hJ : Fintype.card J = 2 * z + 1) (c : C) :
    2 * z * z ≤ (Finset.univ.filter fun p : JudgePair J => p.Agree r c ∧ p.Distinct).card ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,23,True,,3,-0.8695652173913043,"theorem distinct_judge_pairs_card_lower_bound {z : ℕ} (hJ : Fintype.card J = 2 * z + 1) (c : C) :
    2 * z * z ≤ (Finset.univ.filter fun p : JudgePair J => p.Agree r c ∧ p.Distinct).card := by
  let s := Finset.univ.filter fun p : JudgePair J => p.Agree r c
  let t := Finset.univ.filter fun p : JudgePair J => p.Distinct
  have hs : 2 * z * z + 2 * z + 1 ≤ s.card := judge_pairs_card_lower_bound r hJ c
  have hst : s \ t = Finset.univ.diag := by
    ext p; constructor <;> intros hp
    · unfold_let s t at hp
      aesop
    · unfold_let s t
      suffices p.judge₁ = p.judge₂ by simp [this]
      aesop
  have hst' : (s \ t).card = 2 * z + 1 := by rw [hst, Finset.diag_card, ← hJ]; rfl
  rw [Finset.filter_and, ← Finset.sdiff_sdiff_self_left s t, Finset.card_sdiff]
  · rw [hst']; exact Nat.le_sub_of_add_le hs
  · apply Finset.sdiff_subset","theorem distinct_judge_pairs_card_lower_bound {z : ℕ} (hJ : Fintype.card J = 2 * z + 1) (c : C) :
    2 * z * z ≤ (Finset.univ.filter fun p : JudgePair J => p.Agree r c ∧ p.Distinct).card   := by
  let s := Finset.univ.filter fun p => JudgePair.Agree r p c
  have hs : 2 * z * z + 2 * z + 1 ≤ s.card := judge_pairs_card_lower_bound r hJ c
  suffices : (s.filter JudgePair.Distinct).card = (Finset.univ.filter fun p => JudgePair.Agree r c ∧ p.Distinct).card by",65.79453682899475
compfiles,Compfiles/Usa1998P3.lean,"lemma lemma1 (x : ℝ) (hx : x ∈ Set.Ioo 0 (Real.pi / 2)) :
    Real.tan (x - Real.pi / 4) < 1 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,27,True,,27,0.0,"lemma lemma1 (x : ℝ) (hx : x ∈ Set.Ioo 0 (Real.pi / 2)) :
    Real.tan (x - Real.pi / 4) < 1 := by
  let y' x := Real.tan (x - Real.pi / 4)
  have h4 : Real.tan (Real.pi / 4) = y' (Real.pi / 2) := by
    dsimp only [y']
    rw [Real.tan_pi_div_two_sub, Real.tan_pi_div_four, one_eq_inv]
  rw [← Real.tan_pi_div_four]
  rw [h4]
  let y1 x := x - Real.pi / 4
  have h5 : StrictMonoOn y1 (Set.Icc 0 (Real.pi / 2)) := by
    intro a _ b _ hab
    exact sub_lt_sub_right hab _

  have h6 : StrictMonoOn y' (Set.Icc 0 (Real.pi / 2)) := by
    apply StrictMonoOn.comp (g := Real.tan) (f := y1)
         (t := (Set.Icc (-Real.pi / 4) (Real.pi / 4)))
         (StrictMonoOn.mono Real.strictMonoOn_tan lemma0)
         h5
    · intro a ha
      obtain ⟨ha1, ha2⟩ := ha
      constructor
      · dsimp [y1]; linarith
      · dsimp [y1]; linarith

  apply h6
  · exact Set.mem_Icc_of_Ioo hx
  · constructor
    . exact le_of_lt Real.pi_div_two_pos
    . exact Eq.le rfl
  · exact hx.2","lemma lemma1 (x : ℝ) (hx : x ∈ Set.Ioo 0 (Real.pi / 2)) :
    Real.tan (x - Real.pi / 4) < 1 := by
  let y' x := Real.tan (x - Real.pi / 4)
  have h4 : Real.tan (Real.pi / 4) = y' (Real.pi / 2) := by
    dsimp only [y']
    rw [Real.tan_pi_div_two_sub, Real.tan_pi_div_four, one_eq_inv]
  rw [← Real.tan_pi_div_four]
  rw [h4]
  let y1 x := x - Real.pi / 4
  have h5 : StrictMonoOn y1 (Set.Icc 0 (Real.pi / 2)) := by
    intro a _ b _ hab
    exact sub_lt_sub_right hab _

  have h6 : StrictMonoOn y' (Set.Icc 0 (Real.pi / 2)) := by
    apply StrictMonoOn.comp (g := Real.tan) (f := y1)
         (t := (Set.Icc (-Real.pi / 4) (Real.pi / 4)))
         (StrictMonoOn.mono Real.strictMonoOn_tan lemma0)
         h5
    · intro a ha
      obtain ⟨ha1, ha2⟩ := ha
      constructor
      · dsimp [y1]; linarith
      · dsimp [y1]; linarith

  apply h6
  · exact Set.mem_Icc_of_Ioo hx
  · constructor
    . exact le_of_lt Real.pi_div_two_pos
    . exact Eq.le rfl
  · exact hx.2",61.01163291931152
compfiles,Compfiles/Imo2005P4.lean,"problem imo2005_p4 {k : ℕ} (hk : 0 < k) :
    (∀ n : ℕ, 1 ≤ n → IsCoprime (a n) k) ↔ ⟨k, hk⟩ ∈ SolutionSet ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,25,True,,1,-0.96,"problem imo2005_p4 {k : ℕ} (hk : 0 < k) :
    (∀ n : ℕ, 1 ≤ n → IsCoprime (a n) k) ↔ ⟨k, hk⟩ ∈ SolutionSet := by
  rw [Set.mem_singleton_iff,
      show ((⟨k, hk⟩: ℕ+) = 1) ↔ k = 1 from eq_iff_eq_of_cmp_eq_cmp rfl]
  constructor; rotate_left
  · -- The property is clearly true for `k = 1`
    rintro rfl n -
    exact isCoprime_one_right
  intro h
  -- Conversely, suppose `k` is a number with the property, and let `p` be `k.minFac` (by
  -- definition this is the minimal prime factor of `k` if `k ≠ 1`, and otherwise `1`.
  let p := k.minFac
  -- Suppose for the sake of contradiction that `k ≠ 1`.  Then `p` is genuinely a prime factor of
  -- `k`. Hence, it divides none of `a n`, `1 ≤ n`
  by_contra hk'
  have hp : Nat.Prime p := Nat.minFac_prime hk'
  replace h : ∀ n, 1 ≤ n → ¬(p : ℤ) ∣ a n := fun n hn ↦ by
    have : IsCoprime (a n) p :=
      .of_isCoprime_of_dvd_right (h n hn) (Int.natCast_dvd_natCast.mpr k.minFac_dvd)
    rwa [isCoprime_comm,(Nat.prime_iff_prime_int.mp hp).coprime_iff_not_dvd] at this
  -- For `p = 2` and `p = 3`, take `n = 1` and `n = 2`, respectively
  by_cases hp2 : p = 2
  · rw [hp2] at h
    apply h 1 <;> decide
  by_cases hp3 : p = 3
  · rw [hp3] at h
    apply h 2 <;> decide
  -- Otherwise, take `n = p - 2`
  refine h (p - 2) ?_ (find_specified_factor hp hp2 hp3)
  calc
    1 = 3 - 2 := by norm_num
    _ ≤ p - 2 := tsub_le_tsub_right (Nat.succ_le_of_lt <| hp.two_le.lt_of_ne' hp2) _","problem imo2005_p4 {k : ℕ} (hk : 0 < k) :
    (∀ n : ℕ, 1 ≤ n → IsCoprime (a n) k) ↔ ⟨k, hk⟩ ∈ SolutionSet  := by
  rw [Set.mem_singleton_iff, PNat.eq_iff, Nat.eq_one_iff]
  constructor;
  rintro rfl n -; exact isCoprime_one_right
  intro h; let p := k.minFac; by_contra hk'; have hp : Nat.Prime p := Nat.minFac_prime hk'
  replace h : ∀ n, 1 ≤ n → ¬(p : ℤ) ∣ a n := λ n hn, of_isCoprime_of_dvd_right (h n hn) (Int.natCast_dvd_natCast.mpr k.minFac_dvd) |> (isCoprime_comm, (Nat.prime_iff_prime_int.mp hp).coprime_iff_not_dvd).mp",85.25073575973511
compfiles,Compfiles/Imo2008P2.lean,"problem imo2008_p2a (x y z : ℝ) (h : x * y * z = 1) (hx : x ≠ 1) (hy : y ≠ 1) (hz : z ≠ 1) :
    x ^ 2 / (x - 1) ^ 2 + y ^ 2 / (y - 1) ^ 2 + z ^ 2 / (z - 1) ^ 2 ≥ 1 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,30,True,,30,0.0,"problem imo2008_p2a (x y z : ℝ) (h : x * y * z = 1) (hx : x ≠ 1) (hy : y ≠ 1) (hz : z ≠ 1) :
    x ^ 2 / (x - 1) ^ 2 + y ^ 2 / (y - 1) ^ 2 + z ^ 2 / (z - 1) ^ 2 ≥ 1 := by
  obtain ⟨a, b, c, ha, hb, hc, rfl, rfl, rfl⟩ := subst_abc h
  obtain ⟨m, n, rfl, rfl⟩ : ∃ m n, b = c - m ∧ a = c - m - n := by use c - b, b - a; simp
  have hm_ne_zero : m ≠ 0 := by contrapose! hy; field_simp; assumption
  have hn_ne_zero : n ≠ 0 := by contrapose! hx; field_simp; assumption
  have hmn_ne_zero : m + n ≠ 0 := by contrapose! hz; field_simp; linarith
  have hc_sub_sub : c - (c - m - n) = m + n := by abel
  rw [ge_iff_le, ← sub_nonneg]
  convert sq_nonneg ((c * (m ^ 2 + n ^ 2 + m * n) - m * (m + n) ^ 2) / (m * n * (m + n)))
  field_simp [hc_sub_sub]; ring","problem imo2008_p2a (x y z : ℝ) (h : x * y * z = 1) (hx : x ≠ 1) (hy : y ≠ 1) (hz : z ≠ 1) :
    x ^ 2 / (x - 1) ^ 2 + y ^ 2 / (y - 1) ^ 2 + z ^ 2 / (z - 1) ^ 2 ≥ 1 := by
  obtain ⟨a, b, c, ha, hb, hc, rfl, rfl, rfl⟩ := subst_abc h
  obtain ⟨m, n, rfl, rfl⟩ : ∃ m n, b = c - m ∧ a = c - m - n := by use c - b, b - a; simp
  have hm_ne_zero : m ≠ 0 := by contrapose! hy; field_simp; assumption
  have hn_ne_zero : n ≠ 0 := by contrapose! hx; field_simp; assumption
  have hmn_ne_zero : m + n ≠ 0 := by contrapose! hz; field_simp; linarith
  have hc_sub_sub : c - (c - m - n) = m + n := by abel
  rw [ge_iff_le, ← sub_nonneg]
  convert sq_nonneg ((c * (m ^ 2 + n ^ 2 + m * n) - m * (m + n) ^ 2) / (m * n * (m + n)))
  field_simp [hc_sub_sub]; ring",110.49188280105591
compfiles,Compfiles/Russia1998P42.lean,"problem russia1998_p42
  (stardef : ∀ a b c, a ⋆ b ⋆ c = a + b + c) :
  (∀ a b, a ⋆ b = a + b) ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,27,True,,27,0.0,"problem russia1998_p42
  (stardef : ∀ a b c, a ⋆ b ⋆ c = a + b + c) :
  (∀ a b, a ⋆ b = a + b) :=
by
  have lemma2 : ∀ a b d, a ⋆ b = d ⋆ b → a = d := by
    intro a b d hab
    have := calc a + b + a
        = a ⋆ b ⋆ a := (stardef _ _ _).symm
      _ = d ⋆ b ⋆ a := by rw [hab]
      _ = d + b + a := stardef _ _ _
    rw [add_left_inj, add_left_inj] at this
    exact this

  have lemma3 : ∀ a b, a ⋆ b = b ⋆ a := by
    intro a b
    have h1 := calc a ⋆ b ⋆ 1 = a + b + 1 := stardef _ _ _
                    _ = b + a + 1 := by rw [add_comm a b]
                    _ = b ⋆ a ⋆ 1 := (stardef _ _ _).symm
    exact lemma2 _ 1 _ h1

  have lemma4 : ∀ a, a ⋆ 0 = a := by
    intro a
    let x := a ⋆ 0
    have h1 := calc x ⋆ 0
        = a + 0 + 0 := stardef a 0 0
      _ = a := by rw [add_zero, add_zero]

    have h2 := calc 2 * x
        = x + x := two_mul x
      _ = x + 0 + x := by rw [add_zero]
      _ = x ⋆ 0 ⋆ x := (stardef _ _ _).symm
      _ = a ⋆ x := by rw [h1]
      _ = x ⋆ a := lemma3 _ _
      _ = a ⋆ 0 ⋆ a := rfl
      _ = a + 0 + a := stardef _ _ _
      _ = a + a := by rw [add_zero]
      _ = 2 * a := (two_mul a).symm
    have h3 : (2:ℝ) ≠ 0 := two_ne_zero
    have h4 : x = a := (mul_right_inj' h3).mp h2
    exact h4

  intro a b

  have := calc a + b = a + b + 0 := by rw [add_zero]
                   _ = a ⋆ b ⋆ 0 := (stardef _ _ _).symm
                   _ = a ⋆ b := lemma4 _
  exact this.symm","problem russia1998_p42
  (stardef : ∀ a b c, a ⋆ b ⋆ c = a + b + c) :
  (∀ a b, a ⋆ b = a + b) :=
by
  have lemma2 : ∀ a b d, a ⋆ b = d ⋆ b → a = d := by
    intro a b d hab
    have := calc a + b + a
        = a ⋆ b ⋆ a := (stardef _ _ _).symm
      _ = d ⋆ b ⋆ a := by rw [hab]
      _ = d + b + a := stardef _ _ _
    rw [add_left_inj, add_left_inj] at this
    exact this

  have lemma3 : ∀ a b, a ⋆ b = b ⋆ a := by
    intro a b
    have h1 := calc a ⋆ b ⋆ 1 = a + b + 1 := stardef _ _ _
                    _ = b + a + 1 := by rw [add_comm a b]
                    _ = b ⋆ a ⋆ 1 := (stardef _ _ _).symm
    exact lemma2 _ 1 _ h1

  have lemma4 : ∀ a, a ⋆ 0 = a := by
    intro a
    let x := a ⋆ 0
    have h1 := calc x ⋆ 0
        = a + 0 + 0 := stardef a 0 0
      _ = a := by rw [add_zero, add_zero]

    have h2 := calc 2 * x
        = x + x := two_mul x
      _ = x + 0 + x := by rw [add_zero]
      _ = x ⋆ 0 ⋆ x := (stardef _ _ _).symm
      _ = a ⋆ x := by rw [h1]
      _ = x ⋆ a := lemma3 _ _
      _ = a ⋆ 0 ⋆ a := rfl
      _ = a + 0 + a := stardef _ _ _
      _ = a + a := by rw [add_zero]
      _ = 2 * a := (two_mul a).symm
    have h3 : (2:ℝ) ≠ 0 := two_ne_zero
    have h4 : x = a := (mul_right_inj' h3).mp h2
    exact h4

  intro a b

  have := calc a + b = a + b + 0 := by rw [add_zero]
                   _ = a ⋆ b ⋆ 0 := (stardef _ _ _).symm
                   _ = a ⋆ b := lemma4 _
  exact this.symm",57.24332904815674
compfiles,Compfiles/Imo2021P1.lean,"theorem exists_triplet_summing_to_squares (n : ℕ) (hn : 100 ≤ n) :
    ∃ a b c : ℕ, n ≤ a ∧ a < b ∧ b < c ∧ c ≤ 2 * n ∧
      (∃ k : ℕ, a + b = k ^ 2) ∧ (∃ l : ℕ, c + a = l ^ 2) ∧ ∃ m : ℕ, b + c = m ^ 2 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,28,True,,28,0.0,"theorem exists_triplet_summing_to_squares (n : ℕ) (hn : 100 ≤ n) :
    ∃ a b c : ℕ, n ≤ a ∧ a < b ∧ b < c ∧ c ≤ 2 * n ∧
      (∃ k : ℕ, a + b = k ^ 2) ∧ (∃ l : ℕ, c + a = l ^ 2) ∧ ∃ m : ℕ, b + c = m ^ 2 := by
  obtain ⟨l, hl1, hl2⟩ := exists_numbers_in_interval n hn
  have p : 1 < l := by contrapose! hl1; interval_cases l <;> linarith
  have h₁ : 4 * l ≤ 2 * l ^ 2 := by omega
  have h₂ : 1 ≤ 2 * l := by omega
  refine ⟨2 * l ^ 2 - 4 * l, 2 * l ^ 2 + 1, 2 * l ^ 2 + 4 * l, ?_, ?_, ?_,
    ⟨?_, ⟨2 * l - 1, ?_⟩, ⟨2 * l, ?_⟩, 2 * l + 1, ?_⟩⟩
  all_goals zify [h₁, h₂]; linarith","theorem exists_triplet_summing_to_squares (n : ℕ) (hn : 100 ≤ n) :
    ∃ a b c : ℕ, n ≤ a ∧ a < b ∧ b < c ∧ c ≤ 2 * n ∧
      (∃ k : ℕ, a + b = k ^ 2) ∧ (∃ l : ℕ, c + a = l ^ 2) ∧ ∃ m : ℕ, b + c = m ^ 2 := by
  obtain ⟨l, hl1, hl2⟩ := exists_numbers_in_interval n hn
  have p : 1 < l := by contrapose! hl1; interval_cases l <;> linarith
  have h₁ : 4 * l ≤ 2 * l ^ 2 := by omega
  have h₂ : 1 ≤ 2 * l := by omega
  refine ⟨2 * l ^ 2 - 4 * l, 2 * l ^ 2 + 1, 2 * l ^ 2 + 4 * l, ?_, ?_, ?_,
    ⟨?_, ⟨2 * l - 1, ?_⟩, ⟨2 * l, ?_⟩, 2 * l + 1, ?_⟩⟩
  all_goals zify [h₁, h₂]; linarith",85.23963809013367
compfiles,Compfiles/Usa2019P1.lean,"lemma lemma_2
    (f : ℕ+ → ℕ+)
    (hf : ∀ n, f^[f n] n * f (f n) = n ^ 2)
    (m : ℕ+)
    (hm1 : f^[2] m = f^[f m] m)
    (hm2 : f^[f m] m = m)
    (hm3 : Odd m.val) :
    f m = m ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,LENGTH,gpt-4o,True,True,True,10,False,True,,30,True,,30,0.0,"lemma lemma_2
    (f : ℕ+ → ℕ+)
    (hf : ∀ n, f^[f n] n * f (f n) = n ^ 2)
    (m : ℕ+)
    (hm1 : f^[2] m = f^[f m] m)
    (hm2 : f^[f m] m = m)
    (hm3 : Odd m.val) :
    f m = m := by
  -- Let f(m)=k.
  let k := f m
  -- Since f^2(m)=m, f(k)=m.
  have h1 : f k = m := by
    unfold_let k; dsimp at hm1 hm2; rw[hm1, hm2]

  -- So, f^2(k)=k.
  have h2 : f^[2] k = k := by dsimp; rw[h1]

  -- f^2(k) · f^{f(k)}(k) = k^2.
  have h3 : f^[f k] k * f^[2] k = k^2 := hf k
  rw [h2] at h3

  -- Since k≠0, f^{f(k)}(k)=k.
  have h4 : f^[f k] k = k := by
    rwa [sq k, mul_left_inj] at h3

  -- ⇒ f^m(k)=k
  rw [h1] at h4

  -- ⇒ f^{gcd(m, 2)}(k)=k
  -- ⇒ f(k)=k
  have h6 : ∀ r , f^[2*r] k = k := fun r ↦ by
    induction' r with r ih
    · simp
    · rw [Nat.mul_succ]
      rw [Function.iterate_add]
      change f^[2 * r] (f^[2] k) = k
      rw[h2]
      exact ih
  obtain ⟨m', hm'⟩ := hm3
  rw [hm', add_comm, Function.iterate_add, Function.iterate_one] at h4
  change f (f^[2 * m'] k) = k at h4
  rw [h6 m'] at h4

  rw [h1] at h4
  exact h4.symm","lemma lemma_2
    (f : ℕ+ → ℕ+)
    (hf : ∀ n, f^[f n] n * f (f n) = n ^ 2)
    (m : ℕ+)
    (hm1 : f^[2] m = f^[f m] m)
    (hm2 : f^[f m] m = m)
    (hm3 : Odd m.val) :
    f m = m := by
  -- Let f(m)=k.
  let k := f m
  -- Since f^2(m)=m, f(k)=m.
  have h1 : f k = m := by
    unfold_let k; dsimp at hm1 hm2; rw[hm1, hm2]

  -- So, f^2(k)=k.
  have h2 : f^[2] k = k := by dsimp; rw[h1]

  -- f^2(k) · f^{f(k)}(k) = k^2.
  have h3 : f^[f k] k * f^[2] k = k^2 := hf k
  rw [h2] at h3

  -- Since k≠0, f^{f(k)}(k)=k.
  have h4 : f^[f k] k = k := by
    rwa [sq k, mul_left_inj] at h3

  -- ⇒ f^m(k)=k
  rw [h1] at h4

  -- ⇒ f^{gcd(m, 2)}(k)=k
  -- ⇒ f(k)=k
  have h6 : ∀ r , f^[2*r] k = k := fun r ↦ by
    induction' r with r ih
    · simp
    · rw [Nat.mul_succ]
      rw [Function.iterate_add]
      change f^[2 * r] (f^[2] k) = k
      rw[h2]
      exact ih
  obtain ⟨m', hm'⟩ := hm3
  rw [hm', add_comm, Function.iterate_add, Function.iterate_one] at h4
  change f (f^[2 * m'] k) = k at h4
  rw [h6 m'] at h4

  rw [h1] at h4
  exact h4.symm",128.9949221611023
