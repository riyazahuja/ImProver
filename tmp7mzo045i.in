{"cmd": "/-\nCopyright (c) 2023 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n\nimport Mathlib.AlgebraicTopology.KanComplex\n\n/-!\n# Quasicategories\n\nIn this file we define quasicategories,\na common model of infinity categories.\nWe show that every Kan complex is a quasicategory.\n\nIn `Mathlib/AlgebraicTopology/Nerve.lean`\nwe show (TODO) that the nerve of a category is a quasicategory.\n\n## TODO\n\n- Generalize the definition to higher universes.\n  See the corresponding TODO in `Mathlib/AlgebraicTopology/KanComplex.lean`.\n\n-/\n\nnamespace SSet\n\nopen CategoryTheory Simplicial\n\n/-- A simplicial set `S` is a *quasicategory* if it satisfies the following horn-filling condition:\nfor every `n : \u2115` and `0 < i < n`,\nevery map of simplicial sets `\u03c3\u2080 : \u039b[n, i] \u2192 S` can be extended to a map `\u03c3 : \u0394[n] \u2192 S`.\n\n[Kerodon, 003A] -/\nclass Quasicategory (S : SSet) : Prop where\n  hornFilling' : \u2200 \u2983n : \u2115\u2984 \u2983i : Fin (n+3)\u2984 (\u03c3\u2080 : \u039b[n+2, i] \u27f6 S)\n    (_h0 : 0 < i) (_hn : i < Fin.last (n+2)),\n      \u2203 \u03c3 : \u0394[n+2] \u27f6 S, \u03c3\u2080 = hornInclusion (n+2) i \u226b \u03c3"}

{"cmd": "\n\nlemma Quasicategory.hornFilling {S : SSet} [Quasicategory S] \u2983n : \u2115\u2984 \u2983i : Fin (n+1)\u2984\n    (h0 : 0 < i) (hn : i < Fin.last n)\n    (\u03c3\u2080 : \u039b[n, i] \u27f6 S) : \u2203 \u03c3 : \u0394[n] \u27f6 S, \u03c3\u2080 = hornInclusion n i \u226b \u03c3  := by\n  cases n with\n  | zero => simp [Fin.lt_iff_val_lt_val] at hn\n  | succ n =>\n  cases n with\n  | zero =>\n  simp [Fin.lt_iff_val_lt_val, Fin.val_zero, Fin.val_last, zero_add, Nat.lt_one_iff, hn] at h0\n  | succ n => exact Quasicategory.hornFilling' \u03c3\u2080 h0 hn\n", "allTactics": true, "theorems": true, "env": 0}

{"cmd": "\n\nlemma Quasicategory.hornFilling {S : SSet} [Quasicategory S] \u2983n : \u2115\u2984 \u2983i : Fin (n+1)\u2984\n    (h0 : 0 < i) (hn : i < Fin.last n)\n    (\u03c3\u2080 : \u039b[n, i] \u27f6 S) : \u2203 \u03c3 : \u0394[n] \u27f6 S, \u03c3\u2080 = hornInclusion n i \u226b \u03c3  := by\n  cases n with\n  | zero => simp [Fin.lt_iff_val_lt_val] at hn\n  | succ n => cases n with\n  | zero => simp [Fin.lt_iff_val_lt_val, Fin.val_zero, Fin.val_last, zero_add, Nat.lt_one_iff] at h0 hn; simp [hn] at h0\n  | succ n => exact Quasicategory.hornFilling' \u03c3\u2080 h0 hn\n", "allTactics": true, "theorems": true, "env": 0}

{"cmd": "\n\nlemma Quasicategory.hornFilling {S : SSet} [Quasicategory S] \u2983n : \u2115\u2984 \u2983i : Fin (n+1)\u2984\n    (h0 : 0 < i) (hn : i < Fin.last n)\n    (\u03c3\u2080 : \u039b[n, i] \u27f6 S) : \u2203 \u03c3 : \u0394[n] \u27f6 S, \u03c3\u2080 = hornInclusion n i \u226b \u03c3  := by\n  cases n with\n  | zero => simp [Fin.lt_iff_val_lt_val] at hn\n  | succ n =>\n    cases n with\n    | zero =>\n      simp [Fin.lt_iff_val_lt_val, Fin.val_zero, Fin.val_last, zero_add, Nat.lt_one_iff] at h0 hn\n      simp [hn] at h0\n    | succ n => exact Quasicategory.hornFilling' \u03c3\u2080 h0 hn\n", "allTactics": true, "theorems": true, "env": 0}