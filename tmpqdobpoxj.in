{"cmd": "/- Copyright 2023 Daniel J. Velleman -/\n\nimport HTPILib.Chap4\nnamespace HTPI\n\n/- Definitions -/\ndef graph {A B : Type} (f : A \u2192 B) : Set (A \u00d7 B) :=\n    {(a, b) : A \u00d7 B | f a = b}\n\ndef is_func_graph {A B : Type} (G : Set (A \u00d7 B)) : Prop :=\n    \u2200 (x : A), \u2203! (y : B), (x, y) \u2208 G\n\ndef onto {A B : Type} (f : A \u2192 B) : Prop :=\n  \u2200 (y : B), \u2203 (x : A), f x = y\n\ndef one_to_one {A B : Type} (f : A \u2192 B) : Prop :=\n  \u2200 (x1 x2 : A), f x1 = f x2 \u2192 x1 = x2\n\ndef closed {A : Type} (f : A \u2192 A) (C : Set A) : Prop := \u2200 x \u2208 C, f x \u2208 C\n\ndef closure {A : Type} (f : A \u2192 A) (B C : Set A) : Prop :=\n  smallestElt (sub A) C {D : Set A | B \u2286 D \u2227 closed f D}\n\ndef closed2 {A : Type} (f : A \u2192 A \u2192 A) (C : Set A) : Prop :=\n  \u2200 x \u2208 C, \u2200 y \u2208 C, f x y \u2208 C\n\ndef closure2 {A : Type} (f : A \u2192 A \u2192 A) (B C : Set A) : Prop :=\n  smallestElt (sub A) C {D : Set A | B \u2286 D \u2227 closed2 f D}\n\ndef closed_family {A : Type} (F : Set (A \u2192 A)) (C : Set A) : Prop :=\n  \u2200 f \u2208 F, closed f C\n\ndef closure_family {A : Type} (F : Set (A \u2192 A)) (B C : Set A) : Prop :=\n  smallestElt (sub A) C {D : Set A | B \u2286 D \u2227 closed_family F D}\n\ndef image {A B : Type} (f : A \u2192 B) (X : Set A) : Set B :=\n  {f x | x \u2208 X}\n\ndef inverse_image {A B : Type} (f : A \u2192 B) (Y : Set B) : Set A :=\n  {a : A | f a \u2208 Y}\n\n/- Section 5.1 -/"}

{"cmd": "theorem graph_def {A B : Type} (f : A \u2192 B) (a : A) (b : B) :\n    (a, b) \u2208 graph f \u2194 f a = b := by rfl\n\ntheorem func_from_graph_ltr {A B : Type} (F : Set (A \u00d7 B)) :\n    (\u2203 (f : A \u2192 B), graph f = F) \u2192 is_func_graph F := sorry\n\n--This proof is explained in Section 8.2\ntheorem func_from_graph_rtl {A B : Type} (F : Set (A \u00d7 B)) :\n    is_func_graph F \u2192 (\u2203 (f : A \u2192 B), graph f = F) := by\n  assume h1 : is_func_graph F\n  define at h1    --h1 : \u2200 (x : A), \u2203! (y : B), (x, y) \u2208 F\n  have h2 : \u2200 (x : A), \u2203 (y : B), (x, y) \u2208 F := by\n    fix x : A\n    obtain (y : B) (h3 : (x, y) \u2208 F)\n      (h4 : \u2200 (y1 y2 : B), (x, y1) \u2208 F \u2192 (x, y2) \u2208 F \u2192 y1 = y2) from h1 x\n    show \u2203 (y : B), (x, y) \u2208 F from Exists.intro y h3\n    done\n  set f : A \u2192 B := fun (x : A) => Classical.choose (h2 x)\n  apply Exists.intro f\n  apply Set.ext\n  fix (x, y) : A \u00d7 B\n  have h3 : (x, f x) \u2208 F := Classical.choose_spec (h2 x)\n  apply Iff.intro\n  \u00b7 -- (\u2192)\n    assume h4 : (x, y) \u2208 graph f\n    define at h4        --h4 : f x = y\n    rewrite [h4] at h3\n    show (x, y) \u2208 F from h3\n    done\n  \u00b7 -- (\u2190)\n    assume h4 : (x, y) \u2208 F\n    define              --Goal : f x = y\n    obtain (z : B) (h5 : (x, z) \u2208 F)\n      (h6 : \u2200 (y1 y2 : B), (x, y1) \u2208 F \u2192 (x, y2) \u2208 F \u2192 y1 = y2) from h1 x\n    show f x = y from h6 (f x) y h3 h4\n    done\n  done\n\ntheorem func_from_graph {A B : Type} (F : Set (A \u00d7 B)) :\n    (\u2203 (f : A \u2192 B), graph f = F) \u2194 is_func_graph F :=\n  Iff.intro (func_from_graph_ltr F) (func_from_graph_rtl F)\n\ntheorem Theorem_5_1_4 {A B : Type} (f g : A \u2192 B) :\n    (\u2200 (a : A), f a = g a) \u2192 f = g := funext\n\nexample {A B : Type} (f g : A \u2192 B) :\n    graph f = graph g \u2192 f = g := by\n  assume h1 : graph f = graph g  --Goal : f = g\n  apply funext                   --Goal : \u2200 (x : A), f x = g x\n  fix x : A\n  have h2 : (x, f x) \u2208 graph f := by\n    define                       --Goal : f x = f x\n    rfl\n    done\n  rewrite [h1] at h2             --h2 : (x, f x) \u2208 graph g\n  define at h2                   --h2 : g x = f x\n  show f x = g x from h2.symm\n  done\n\ndef square1 (n : Nat) : Nat := n ^ 2\n\ndef square2 : Nat \u2192 Nat := fun (n : Nat) => n ^ 2\n\nexample : square1 = square2 := by rfl\n\n#eval square1 7     --Answer: 49\n\ntheorem Theorem_5_1_5 {A B C : Type} (f : A \u2192 B) (g : B \u2192 C) :\n    \u2203 (h : A \u2192 C), graph h = comp (graph g) (graph f) := by\n  set h : A \u2192 C := fun (x : A) => g (f x)\n  apply Exists.intro h\n  apply Set.ext\n  fix (a, c) : A \u00d7 C\n  apply Iff.intro\n  \u00b7 -- Proof that (a, c) \u2208 graph h \u2192 (a, c) \u2208 comp (graph g) (graph f)\n    assume h1 : (a, c) \u2208 graph h\n    define at h1  --h1 : h a = c\n    define        --Goal : \u2203 (x : B), (a, x) \u2208 graph f \u2227 (x, c) \u2208 graph g\n    apply Exists.intro (f a)\n    apply And.intro\n    \u00b7 -- Proof that (a, f a) \u2208 graph f\n      define\n      rfl\n      done\n    \u00b7 -- Proof that (f a, c) \u2208 graph g\n      define\n      show g (f a) = c from h1\n      done\n    done\n  \u00b7 -- Proof that (a, c) \u2208 comp (graph g) (graph f) \u2192 (a, c) \u2208 graph h\n    assume h1 : (a, c) \u2208 comp (graph g) (graph f)\n    define        --Goal : h a = c\n    define at h1  --h1 : \u2203 (x : B), (a, x) \u2208 graph f \u2227 (x, c) \u2208 graph g\n    obtain (b : B) (h2 : (a, b) \u2208 graph f \u2227 (b, c) \u2208 graph g) from h1\n    have h3 : (a, b) \u2208 graph f := h2.left\n    have h4 : (b, c) \u2208 graph g := h2.right\n    define at h3          --h3 : f a = b\n    define at h4          --h4 : g b = c\n    rewrite [\u2190h3] at h4   --h4 : g (f a) = c\n    show h a = c from h4\n    done\n  done\n\nexample {A B C D : Type} (f : A \u2192 B) (g : B \u2192 C) (h : C \u2192 D) :\n    h \u2218 (g \u2218 f) = (h \u2218 g) \u2218 f := by rfl\n\nexample {A B : Type} (f : A \u2192 B) : f \u2218 id = f := by rfl\n\nexample {A B : Type} (f : A \u2192 B) : id \u2218 f = f := by rfl\n\n/- Section 5.2 -/\ntheorem Theorem_5_2_5_1 {A B C : Type} (f : A \u2192 B) (g : B \u2192 C) :\n    one_to_one f \u2192 one_to_one g \u2192 one_to_one (g \u2218 f) := by\n  assume h1 : one_to_one f\n  assume h2 : one_to_one g\n  define at h1  --h1 : \u2200 (x1 x2 : A), f x1 = f x2 \u2192 x1 = x2\n  define at h2  --h2 : \u2200 (x1 x2 : B), g x1 = g x2 \u2192 x1 = x2\n  define        --Goal : \u2200 (x1 x2 : A), (g \u2218 f) x1 = (g \u2218 f) x2 \u2192 x1 = x2\n  fix a1 : A\n  fix a2 : A    --Goal : (g \u2218 f) a1 = (g \u2218 f) a2 \u2192 a1 = a2\n  define : (g \u2218 f) a1; define : (g \u2218 f) a2\n                --Goal : g (f a1) = g (f a2) \u2192 a1 = a2\n  assume h3 : g (f a1) = g (f a2)\n  have h4 : f a1 = f a2 := h2 (f a1) (f a2) h3\n  show a1 = a2 from h1 a1 a2 h4\n  done\n\nlemma comp_def {A B C : Type} (g : B \u2192 C) (f : A \u2192 B) (x : A) :\n    (g \u2218 f) x = g (f x) := by rfl\n\n\ntheorem Theorem_5_2_5_2 {A B C : Type} (f : A \u2192 B) (g : B \u2192 C) :\n    onto f \u2192 onto g \u2192 onto (g \u2218 f)    := by\n  intros hf hg c\n  obtain \u27e8b, a, rfl, rfl\u27e9 := \u27e8hg c, hf b\u27e9\n  exact \u27e8a, rfl\u27e9\n", "allTactics": true, "theorems": true, "env": 0}