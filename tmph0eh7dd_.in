{"cmd": "import Tests.Common\nimport Mathlib.Data.Real.Basic\n\nnamespace C03S03\n\nsection\nvariable (a b : \u211d)\n\ndef FnUb (f : \u211d \u2192 \u211d) (a : \u211d) : Prop :=\n  \u2200 x, f x \u2264 a\n\ndef FnLb (f : \u211d \u2192 \u211d) (a : \u211d) : Prop :=\n  \u2200 x, a \u2264 f x\n\ndef FnHasUb (f : \u211d \u2192 \u211d) :=\n  \u2203 a, FnUb f a\n\ndef FnHasLb (f : \u211d \u2192 \u211d) :=\n  \u2203 a, FnLb f a\n\nvariable (f : \u211d \u2192 \u211d)\n"}

{"cmd": "example (h : \u2200 a, \u2203 x, f x < a) : \u00acFnHasLb f := by\n  rintro \u27e8a, ha\u27e9\n  rcases h a with \u27e8x, hx\u27e9\n  have := ha x\n  linarith\n\nexample : \u00acFnHasUb fun x \u21a6 x := by\n  rintro \u27e8a, ha\u27e9\n  have : a + 1 \u2264 a := ha (a + 1)\n  linarith\n\nexample (h : Monotone f) (h' : f a < f b) : a < b := by\n  apply lt_of_not_ge\n  intro h''\n  apply absurd h'\n  apply not_lt_of_ge (h h'')\n\nexample (h : a \u2264 b) (h' : f b < f a) : \u00acMonotone f := by\n  intro h''\n  apply absurd h'\n  apply not_lt_of_ge\n  apply h'' h\n\nexample : \u00ac\u2200 {f : \u211d \u2192 \u211d}, Monotone f \u2192 \u2200 {a b}, f a \u2264 f b \u2192 a \u2264 b := by\n  intro h\n  let f := fun x : \u211d \u21a6 (0 : \u211d)\n  have monof : Monotone f := by\n    intro a b leab\n    rfl\n  have h' : f 1 \u2264 f 0 := le_refl _\n  have : (1 : \u211d) \u2264 0 := h monof h'\n  linarith\n\n\nexample (x : \u211d) (h : \u2200 \u03b5 > 0, x < \u03b5) : x \u2264 0  := by\n  intro h'\n  linarith [h _ h']\n", "allTactics": true, "theorems": true, "env": 0}